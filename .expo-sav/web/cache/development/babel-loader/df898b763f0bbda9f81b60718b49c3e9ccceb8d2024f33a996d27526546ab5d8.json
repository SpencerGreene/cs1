{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { blobToBase64String, base64StringToBlob } from 'blob-util';\nimport { decode, encode } from 'base-64';\nif (!global.btoa) global.btoa = encode;\nif (!global.atob) global.atob = decode;\nexport var BlobToSaveImage = function () {\n  var _ref = _asyncToGenerator(function* (blob, contentType) {\n    var imageData = yield blobToBase64String(blob);\n    return {\n      imageData: imageData,\n      contentType: contentType\n    };\n  });\n  return function BlobToSaveImage(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var savedImageToBlob = function () {\n  var _ref2 = _asyncToGenerator(function* (savedImage) {\n    if (!savedImage) return null;\n    console.log({\n      savedImage: savedImage\n    });\n    try {\n      var blob = base64StringToBlob(savedImage.imageData);\n      return blob;\n    } catch (error) {\n      console.error('Error converting base64 to blob:', error);\n      throw error;\n    }\n  });\n  return function savedImageToBlob(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var saveData = function () {\n  var _ref3 = _asyncToGenerator(function* (key, data) {\n    try {\n      if (Platform.OS === 'web') {\n        if (data instanceof Blob) {\n          var blobUrl = URL.createObjectURL(data);\n          localStorage.setItem(key, blobUrl);\n        } else {\n          localStorage.setItem(key, JSON.stringify(data));\n        }\n      } else {\n        if (data instanceof Blob) {\n          var base64String = yield BlobToBase64(data);\n          yield AsyncStorage.setItem(key, base64String);\n        } else {\n          yield AsyncStorage.setItem(key, JSON.stringify(data));\n        }\n      }\n    } catch (error) {\n      console.error('Error saving data:', error);\n    }\n  });\n  return function saveData(_x4, _x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getData = function () {\n  var _ref4 = _asyncToGenerator(function* (key) {\n    try {\n      if (Platform.OS === 'web') {\n        var storedData = localStorage.getItem(key);\n        if (storedData && storedData.startsWith('blob:')) {\n          return storedData;\n        } else {\n          return storedData ? JSON.parse(storedData) : null;\n        }\n      } else {\n        var _storedData = yield AsyncStorage.getItem(key);\n        return _storedData ? JSON.parse(_storedData) : null;\n      }\n    } catch (error) {\n      console.error('Error retrieving data:', error);\n      return null;\n    }\n  });\n  return function getData(_x6) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var deleteData = function () {\n  var _ref5 = _asyncToGenerator(function* (key) {\n    try {\n      if (Platform.OS === 'web') {\n        var storedData = localStorage.getItem(key);\n        if (storedData && storedData.startsWith('blob:')) {\n          URL.revokeObjectURL(storedData);\n        }\n        localStorage.removeItem(key);\n      } else {\n        yield AsyncStorage.removeItem(key);\n      }\n    } catch (error) {\n      console.error('Error deleting data:', error);\n    }\n  });\n  return function deleteData(_x7) {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["AsyncStorage","blobToBase64String","base64StringToBlob","decode","encode","global","btoa","atob","BlobToSaveImage","_ref","_asyncToGenerator","blob","contentType","imageData","_x","_x2","apply","arguments","savedImageToBlob","_ref2","savedImage","console","log","error","_x3","saveData","_ref3","key","data","Platform","OS","Blob","blobUrl","URL","createObjectURL","localStorage","setItem","JSON","stringify","base64String","BlobToBase64","_x4","_x5","getData","_ref4","storedData","getItem","startsWith","parse","_x6","deleteData","_ref5","revokeObjectURL","removeItem","_x7"],"sources":["/Users/sgreene/src/cs1/helpers/imageHelpers.js"],"sourcesContent":["import { Platform } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport { blobToBase64String, base64StringToBlob } from 'blob-util'\nimport { decode, encode } from 'base-64';\n\nif (!global.btoa) global.btoa = encode;\nif (!global.atob) global.atob = decode;\n\n// Helper function to convert blob to base64 in React Native\nexport const BlobToSaveImage = async (blob, contentType) => {\n    // return new Promise((resolve, reject) => {\n    //     const reader = new FileReader();\n    //     reader.onerror = reject;\n    //     reader.onload = () => {\n    //         const imageData = reader.result.split(',')[1];\n    //         resolve({ imageData, contentType });\n    //     };\n    //     reader.readAsDataURL(blob);\n    // });\n    const imageData = await blobToBase64String(blob);\n    return { imageData, contentType };\n};\n\nexport const savedImageToBlob = async (savedImage) => {\n    if (!savedImage) return null;\n    console.log({savedImage});\n    try {\n        // const response = await fetch(`data:image/jpeg;base64,${savedImage.imageData}`);\n        // const blob = await response.blob();\n        const blob = base64StringToBlob(savedImage.imageData);\n        return blob;\n    } catch (error) {\n        console.error('Error converting base64 to blob:', error);\n        throw error;\n    }\n};\n\n// // Helper function to convert blob to base64 in React Native\n// export const BlobToSaveImage = (blob, contentType) => {\n//     return new Promise((resolve, reject) => {\n//         const reader = new FileReader();\n//         reader.onerror = reject;\n//         reader.onload = () => {\n//             const imageData = reader.result.split(',')[1];\n//             resolve({ imageData, contentType });\n//         };\n//         reader.readAsDataURL(blob);\n//     });\n// };\n\n// export const savedImageToBlob = async (saveImage) => {\n//     try {\n//         const response = await fetch(`data:image/jpeg;base64,${saveImage.imageData}`);\n//         const blob = await response.blob();\n//         return blob;\n//     } catch (error) {\n//         console.error('Error converting base64 to blob:', error);\n//         throw error;\n//     }\n// };\n\n// Function to save data to storage\nexport const saveData = async (key, data) => {\n    try {\n        if (Platform.OS === 'web') {\n            // Handle image blob for web\n            if (data instanceof Blob) {\n                const blobUrl = URL.createObjectURL(data);\n                localStorage.setItem(key, blobUrl);\n            } else {\n                localStorage.setItem(key, JSON.stringify(data));\n            }\n        } else {\n            // Handle image blob for React Native\n            if (data instanceof Blob) {\n                // Convert blob to base64 string\n                const base64String = await BlobToBase64(data);\n                await AsyncStorage.setItem(key, base64String);\n            } else {\n                await AsyncStorage.setItem(key, JSON.stringify(data));\n            }\n        }\n    } catch (error) {\n        console.error('Error saving data:', error);\n    }\n};\n\n// Function to retrieve data from storage\nexport const getData = async (key) => {\n    try {\n        if (Platform.OS === 'web') {\n            const storedData = localStorage.getItem(key);\n            // Check if it's a blob URL\n            if (storedData && storedData.startsWith('blob:')) {\n                return storedData;\n            } else {\n                return storedData ? JSON.parse(storedData) : null;\n            }\n        } else {\n            const storedData = await AsyncStorage.getItem(key);\n            return storedData ? JSON.parse(storedData) : null;\n        }\n    } catch (error) {\n        console.error('Error retrieving data:', error);\n        return null;\n    }\n};\n\n\n\n// Function to delete data from storage\nexport const deleteData = async (key) => {\n    try {\n        if (Platform.OS === 'web') {\n            // Handle cleanup for web (remove blob URL)\n            const storedData = localStorage.getItem(key);\n            if (storedData && storedData.startsWith('blob:')) {\n                URL.revokeObjectURL(storedData);\n            }\n            localStorage.removeItem(key);\n        } else {\n            // Handle cleanup for React Native\n            await AsyncStorage.removeItem(key);\n        }\n    } catch (error) {\n        console.error('Error deleting data:', error);\n    }\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}