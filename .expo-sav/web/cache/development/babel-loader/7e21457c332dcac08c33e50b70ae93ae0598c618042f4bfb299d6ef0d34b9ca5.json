{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Log from \"../utils/log.js\";\nvar log = new Log('EventTarget');\nlog.disable();\nvar EventTarget = function () {\n  function EventTarget() {\n    _classCallCheck(this, EventTarget);\n    log.info('constructor called');\n    this.listeners = {};\n  }\n  _createClass(EventTarget, [{\n    key: \"addEventListener\",\n    value: function addEventListener(type, cb) {\n      log.info('add event listener', type, cb);\n      if (!(type in this.listeners)) {\n        this.listeners[type] = [];\n      }\n      this.listeners[type].push(cb);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, cb) {\n      log.info('remove event listener', type, cb);\n      if (!(type in this.listeners)) return;\n      var handlers = this.listeners[type];\n      for (var i in handlers) {\n        if (cb === handlers[i]) {\n          handlers.splice(i, 1);\n          return this.removeEventListener(type, cb);\n        }\n      }\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(type, event) {\n      log.info('dispatch event', event);\n      if (!(type in this.listeners)) return;\n      var handlers = this.listeners[type];\n      for (var i in handlers) {\n        handlers[i].call(this, event);\n      }\n    }\n  }, {\n    key: \"clearEventListeners\",\n    value: function clearEventListeners() {\n      for (var i in this.listeners) {\n        delete this.listeners[i];\n      }\n    }\n  }]);\n  return EventTarget;\n}();\nexport { EventTarget as default };","map":{"version":3,"names":["Log","log","disable","EventTarget","_classCallCheck","info","listeners","_createClass","key","value","addEventListener","type","cb","push","removeEventListener","handlers","i","splice","dispatchEvent","event","call","clearEventListeners","default"],"sources":["/Users/sgreene/src/cs1/node_modules/react-native-fetch-blob/polyfill/EventTarget.js"],"sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport Log from '../utils/log.js'\n\nconst log = new Log('EventTarget')\n\nlog.disable()\n\nexport default class EventTarget {\n\n  listeners : any;\n\n  constructor() {\n    log.info('constructor called')\n    this.listeners = {}\n  }\n\n  /**\n   * Add an event listener to given event type\n   * @param {string} type Event type string\n   * @param {(Event) => void} cb   Event handler function\n   */\n  addEventListener(type:string, cb : () => void) {\n    log.info('add event listener', type, cb)\n    if(!(type in this.listeners)) {\n      this.listeners[type] = []\n    }\n    this.listeners[type].push(cb)\n  }\n\n  /**\n   * Remove an event listener\n   * @param  {string} type Type of the event listener\n   * @param  {()=>void} cb Event listener function.\n   * @return {[type]}             [description]\n   */\n  removeEventListener(type:string, cb:() => void) {\n    log.info('remove event listener', type, cb)\n    if(!(type in this.listeners))\n      return\n    let handlers = this.listeners[type]\n    for(let i in handlers) {\n      if(cb === handlers[i]) {\n        handlers.splice(i,1)\n        return this.removeEventListener(type, cb)\n      }\n    }\n  }\n\n  /**\n   * Dispatch an event\n   * @param {string} type Event type.\n   * @param {Event} event Event data payload.\n   */\n  dispatchEvent(type:string,event:Event) {\n    log.info('dispatch event', event)\n    if(!(type in this.listeners))\n      return\n    let handlers = this.listeners[type]\n    for(let i in handlers) {\n      handlers[i].call(this, event)\n    }\n\n  }\n\n  /**\n   * Remove all registered listeners from this object.\n   * @nonstandard\n   * @return {[type]} [description]\n   */\n  clearEventListeners() {\n    for(let i in this.listeners) {\n      delete this.listeners[i]\n    }\n  }\n\n}"],"mappings":";;AAIA,OAAOA,GAAG;AAEV,IAAMC,GAAG,GAAG,IAAID,GAAG,CAAC,aAAa,CAAC;AAElCC,GAAG,CAACC,OAAO,CAAC,CAAC;AAAA,IAEQC,WAAW;EAI9B,SAAAA,YAAA,EAAc;IAAAC,eAAA,OAAAD,WAAA;IACZF,GAAG,CAACI,IAAI,CAAC,oBAAoB,CAAC;IAC9B,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;EACrB;EAACC,YAAA,CAAAJ,WAAA;IAAAK,GAAA;IAAAC,KAAA,EAOD,SAAAC,iBAAiBC,IAAW,EAAEC,EAAe,EAAE;MAC7CX,GAAG,CAACI,IAAI,CAAC,oBAAoB,EAAEM,IAAI,EAAEC,EAAE,CAAC;MACxC,IAAG,EAAED,IAAI,IAAI,IAAI,CAACL,SAAS,CAAC,EAAE;QAC5B,IAAI,CAACA,SAAS,CAACK,IAAI,CAAC,GAAG,EAAE;MAC3B;MACA,IAAI,CAACL,SAAS,CAACK,IAAI,CAAC,CAACE,IAAI,CAACD,EAAE,CAAC;IAC/B;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAQD,SAAAK,oBAAoBH,IAAW,EAAEC,EAAa,EAAE;MAC9CX,GAAG,CAACI,IAAI,CAAC,uBAAuB,EAAEM,IAAI,EAAEC,EAAE,CAAC;MAC3C,IAAG,EAAED,IAAI,IAAI,IAAI,CAACL,SAAS,CAAC,EAC1B;MACF,IAAIS,QAAQ,GAAG,IAAI,CAACT,SAAS,CAACK,IAAI,CAAC;MACnC,KAAI,IAAIK,CAAC,IAAID,QAAQ,EAAE;QACrB,IAAGH,EAAE,KAAKG,QAAQ,CAACC,CAAC,CAAC,EAAE;UACrBD,QAAQ,CAACE,MAAM,CAACD,CAAC,EAAC,CAAC,CAAC;UACpB,OAAO,IAAI,CAACF,mBAAmB,CAACH,IAAI,EAAEC,EAAE,CAAC;QAC3C;MACF;IACF;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAOD,SAAAS,cAAcP,IAAW,EAACQ,KAAW,EAAE;MACrClB,GAAG,CAACI,IAAI,CAAC,gBAAgB,EAAEc,KAAK,CAAC;MACjC,IAAG,EAAER,IAAI,IAAI,IAAI,CAACL,SAAS,CAAC,EAC1B;MACF,IAAIS,QAAQ,GAAG,IAAI,CAACT,SAAS,CAACK,IAAI,CAAC;MACnC,KAAI,IAAIK,CAAC,IAAID,QAAQ,EAAE;QACrBA,QAAQ,CAACC,CAAC,CAAC,CAACI,IAAI,CAAC,IAAI,EAAED,KAAK,CAAC;MAC/B;IAEF;EAAC;IAAAX,GAAA;IAAAC,KAAA,EAOD,SAAAY,oBAAA,EAAsB;MACpB,KAAI,IAAIL,CAAC,IAAI,IAAI,CAACV,SAAS,EAAE;QAC3B,OAAO,IAAI,CAACA,SAAS,CAACU,CAAC,CAAC;MAC1B;IACF;EAAC;EAAA,OAAAb,WAAA;AAAA;AAAA,SAlEkBA,WAAW,IAAAmB,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}