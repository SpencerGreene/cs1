{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport RNFetchBlob from \"../index.js\";\nimport ProgressEvent from \"./ProgressEvent.js\";\nimport EventTarget from \"./EventTarget\";\nimport Blob from \"./Blob\";\nimport Log from \"../utils/log.js\";\nimport fs from \"../fs\";\nvar log = new Log('FileReader');\nlog.level(3);\nvar FileReader = function (_EventTarget) {\n  _inherits(FileReader, _EventTarget);\n  var _super = _createSuper(FileReader);\n  function FileReader() {\n    var _this;\n    _classCallCheck(this, FileReader);\n    _this = _super.call(this);\n    _this._readState = 0;\n    log.verbose('file reader const');\n    _this._result = null;\n    return _this;\n  }\n  _createClass(FileReader, [{\n    key: \"isRNFBPolyFill\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      log.verbose('abort');\n    }\n  }, {\n    key: \"readAsArrayBuffer\",\n    value: function readAsArrayBuffer(b) {\n      log.verbose('readAsArrayBuffer', b);\n    }\n  }, {\n    key: \"readAsBinaryString\",\n    value: function readAsBinaryString(b) {\n      log.verbose('readAsBinaryString', b);\n    }\n  }, {\n    key: \"readAsText\",\n    value: function readAsText(b, label) {\n      log.verbose('readAsText', b, label);\n    }\n  }, {\n    key: \"readAsDataURL\",\n    value: function readAsDataURL(b) {\n      log.verbose('readAsDataURL', b);\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(event, e) {\n      log.verbose('dispatch event', event, e);\n      _get(_getPrototypeOf(FileReader.prototype), \"dispatchEvent\", this).call(this, event, e);\n      if (typeof this[`on${event}`] === 'function') {\n        this[`on${event}`](e);\n      }\n    }\n  }, {\n    key: \"readyState\",\n    get: function get() {\n      return this._readyState;\n    }\n  }, {\n    key: \"result\",\n    get: function get() {\n      return this._result;\n    }\n  }], [{\n    key: \"EMPTY\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"LOADING\",\n    get: function get() {\n      return 1;\n    }\n  }, {\n    key: \"DONE\",\n    get: function get() {\n      return 2;\n    }\n  }]);\n  return FileReader;\n}(EventTarget);\nexport { FileReader as default };","map":{"version":3,"names":["RNFetchBlob","ProgressEvent","EventTarget","Blob","Log","fs","log","level","FileReader","_EventTarget","_inherits","_super","_createSuper","_this","_classCallCheck","call","_readState","verbose","_result","_createClass","key","get","value","abort","readAsArrayBuffer","b","readAsBinaryString","readAsText","label","readAsDataURL","dispatchEvent","event","e","_get","_getPrototypeOf","prototype","_readyState","default"],"sources":["/Users/sgreene/src/cs1/node_modules/react-native-fetch-blob/polyfill/FileReader.js"],"sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport RNFetchBlob from '../index.js'\nimport ProgressEvent from './ProgressEvent.js'\nimport EventTarget from './EventTarget'\nimport Blob from './Blob'\nimport Log from '../utils/log.js'\nimport fs from '../fs'\n\nconst log = new Log('FileReader')\n\nlog.level(3)\n\nexport default class FileReader extends EventTarget {\n\n  static get EMPTY(){\n    return 0\n  }\n  static get LOADING(){\n    return 1\n  }\n  static get DONE(){\n    return 2\n  }\n\n  // properties\n  _readState:number = 0;\n  _result:any;\n  _error:any;\n\n  get isRNFBPolyFill(){ return true }\n\n  // event handlers\n  onloadstart:(e:Event) => void;\n  onprogress:(e:Event) => void;\n  onload:(e:Event) => void;\n  onabort:(e:Event) => void;\n  onerror:(e:Event) => void;\n  onloadend:(e:Event) => void;\n\n  constructor() {\n    super()\n    log.verbose('file reader const')\n    this._result = null\n  }\n\n  abort() {\n    log.verbose('abort')\n  }\n\n  readAsArrayBuffer(b:Blob) {\n    log.verbose('readAsArrayBuffer', b)\n  }\n\n  readAsBinaryString(b:Blob) {\n    log.verbose('readAsBinaryString', b)\n  }\n\n  readAsText(b:Blob, label:?string) {\n    log.verbose('readAsText', b, label)\n  }\n\n  readAsDataURL(b:Blob) {\n    log.verbose('readAsDataURL', b)\n  }\n\n  dispatchEvent(event, e) {\n    log.verbose('dispatch event', event, e)\n    super.dispatchEvent(event, e)\n    if(typeof this[`on${event}`] === 'function') {\n      this[`on${event}`](e)\n    }\n  }\n\n  // private methods\n\n  // getters and setters\n\n  get readyState() {\n    return this._readyState\n  }\n\n  get result() {\n    return this._result\n  }\n\n\n\n}\n"],"mappings":";;;;;;;;AAIA,OAAOA,WAAW;AAClB,OAAOC,aAAa;AACpB,OAAOC,WAAW;AAClB,OAAOC,IAAI;AACX,OAAOC,GAAG;AACV,OAAOC,EAAE;AAET,IAAMC,GAAG,GAAG,IAAIF,GAAG,CAAC,YAAY,CAAC;AAEjCE,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC;AAAA,IAESC,UAAU,aAAAC,YAAA;EAAAC,SAAA,CAAAF,UAAA,EAAAC,YAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,UAAA;EA2B7B,SAAAA,WAAA,EAAc;IAAA,IAAAK,KAAA;IAAAC,eAAA,OAAAN,UAAA;IACZK,KAAA,GAAAF,MAAA,CAAAI,IAAA;IAAOF,KAAA,CAfTG,UAAU,GAAU,CAAC;IAgBnBV,GAAG,CAACW,OAAO,CAAC,mBAAmB,CAAC;IAChCJ,KAAA,CAAKK,OAAO,GAAG,IAAI;IAAA,OAAAL,KAAA;EACrB;EAACM,YAAA,CAAAX,UAAA;IAAAY,GAAA;IAAAC,GAAA,EAdD,SAAAA,IAAA,EAAoB;MAAE,OAAO,IAAI;IAAC;EAAC;IAAAD,GAAA;IAAAE,KAAA,EAgBnC,SAAAC,MAAA,EAAQ;MACNjB,GAAG,CAACW,OAAO,CAAC,OAAO,CAAC;IACtB;EAAC;IAAAG,GAAA;IAAAE,KAAA,EAED,SAAAE,kBAAkBC,CAAM,EAAE;MACxBnB,GAAG,CAACW,OAAO,CAAC,mBAAmB,EAAEQ,CAAC,CAAC;IACrC;EAAC;IAAAL,GAAA;IAAAE,KAAA,EAED,SAAAI,mBAAmBD,CAAM,EAAE;MACzBnB,GAAG,CAACW,OAAO,CAAC,oBAAoB,EAAEQ,CAAC,CAAC;IACtC;EAAC;IAAAL,GAAA;IAAAE,KAAA,EAED,SAAAK,WAAWF,CAAM,EAAEG,KAAa,EAAE;MAChCtB,GAAG,CAACW,OAAO,CAAC,YAAY,EAAEQ,CAAC,EAAEG,KAAK,CAAC;IACrC;EAAC;IAAAR,GAAA;IAAAE,KAAA,EAED,SAAAO,cAAcJ,CAAM,EAAE;MACpBnB,GAAG,CAACW,OAAO,CAAC,eAAe,EAAEQ,CAAC,CAAC;IACjC;EAAC;IAAAL,GAAA;IAAAE,KAAA,EAED,SAAAQ,cAAcC,KAAK,EAAEC,CAAC,EAAE;MACtB1B,GAAG,CAACW,OAAO,CAAC,gBAAgB,EAAEc,KAAK,EAAEC,CAAC,CAAC;MACvCC,IAAA,CAAAC,eAAA,CAAA1B,UAAA,CAAA2B,SAAA,0BAAApB,IAAA,OAAoBgB,KAAK,EAAEC,CAAC;MAC5B,IAAG,OAAO,IAAI,CAAE,KAAID,KAAM,EAAC,CAAC,KAAK,UAAU,EAAE;QAC3C,IAAI,CAAE,KAAIA,KAAM,EAAC,CAAC,CAACC,CAAC,CAAC;MACvB;IACF;EAAC;IAAAZ,GAAA;IAAAC,GAAA,EAMD,SAAAA,IAAA,EAAiB;MACf,OAAO,IAAI,CAACe,WAAW;IACzB;EAAC;IAAAhB,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAa;MACX,OAAO,IAAI,CAACH,OAAO;IACrB;EAAC;IAAAE,GAAA;IAAAC,GAAA,EArED,SAAAA,IAAA,EAAkB;MAChB,OAAO,CAAC;IACV;EAAC;IAAAD,GAAA;IAAAC,GAAA,EACD,SAAAA,IAAA,EAAoB;MAClB,OAAO,CAAC;IACV;EAAC;IAAAD,GAAA;IAAAC,GAAA,EACD,SAAAA,IAAA,EAAiB;MACf,OAAO,CAAC;IACV;EAAC;EAAA,OAAAb,UAAA;AAAA,EAVqCN,WAAW;AAAA,SAA9BM,UAAU,IAAA6B,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}