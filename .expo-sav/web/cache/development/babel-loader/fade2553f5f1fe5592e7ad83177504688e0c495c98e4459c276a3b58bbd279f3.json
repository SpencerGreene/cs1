{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { NativeAppEventEmitter } from \"react-native-web/dist/index\";\nvar RNFetchBlob = NativeModules.RNFetchBlob;\nvar emitter = DeviceEventEmitter;\nvar sessions = {};\nvar RNFetchBlobSession = function () {\n  function RNFetchBlobSession(name, list) {\n    _classCallCheck(this, RNFetchBlobSession);\n    this.name = name;\n    if (!sessions[name]) {\n      if (Array.isArray(list)) sessions[name] = list;else sessions[name] = [];\n    }\n  }\n  _createClass(RNFetchBlobSession, [{\n    key: \"add\",\n    value: function add(path) {\n      sessions[this.name].push(path);\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(path) {\n      var list = sessions[this.name];\n      for (var i in list) {\n        if (list[i] === path) {\n          sessions[this.name].splice(i, 1);\n          break;\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"list\",\n    value: function list() {\n      return sessions[this.name];\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _this = this;\n      return new Promise(function (resolve, reject) {\n        RNFetchBlob.removeSession(sessions[_this.name], function (err) {\n          if (err) reject(err);else {\n            delete sessions[_this.name];\n            resolve();\n          }\n        });\n      });\n    }\n  }], [{\n    key: \"getSession\",\n    value: function getSession(name) {\n      return sessions[name];\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(name, val) {\n      sessions[name] = val;\n    }\n  }, {\n    key: \"removeSession\",\n    value: function removeSession(name) {\n      delete sessions[name];\n    }\n  }]);\n  return RNFetchBlobSession;\n}();\nexport { RNFetchBlobSession as default };","map":{"version":3,"names":["NativeAppEventEmitter","RNFetchBlob","NativeModules","emitter","DeviceEventEmitter","sessions","RNFetchBlobSession","name","list","_classCallCheck","Array","isArray","_createClass","key","value","add","path","push","remove","i","splice","dispose","_this","Promise","resolve","reject","removeSession","err","getSession","setSession","val","default"],"sources":["/Users/sgreene/src/cs1/node_modules/react-native-fetch-blob/class/RNFetchBlobSession.js"],"sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport {\n NativeModules,\n DeviceEventEmitter,\n NativeAppEventEmitter,\n} from 'react-native'\n\nconst RNFetchBlob = NativeModules.RNFetchBlob\nconst emitter = DeviceEventEmitter\n\nlet sessions = {}\n\nexport default class RNFetchBlobSession {\n\n  add : (path:string) => RNFetchBlobSession;\n  remove : (path:string) => RNFetchBlobSession;\n  dispose : () => Promise;\n  list : () => Array<string>;\n  name : string;\n\n  static getSession(name:string):any {\n    return sessions[name]\n  }\n\n  static setSession(name:string, val:any) {\n    sessions[name] = val\n  }\n\n  static removeSession(name:string) {\n    delete sessions[name]\n  }\n\n  constructor(name:string, list:Array<string>) {\n    this.name = name\n    if(!sessions[name]) {\n      if(Array.isArray(list))\n      sessions[name] = list\n      else\n      sessions[name] = []\n    }\n  }\n\n  add(path:string):RNFetchBlobSession {\n    sessions[this.name].push(path)\n    return this\n  }\n\n  remove(path:string):RNFetchBlobSession {\n    let list = sessions[this.name]\n    for(let i in list) {\n      if(list[i] === path) {\n        sessions[this.name].splice(i, 1)\n        break;\n      }\n    }\n    return this\n  }\n\n  list():Array<string> {\n    return sessions[this.name]\n  }\n\n  dispose():Promise {\n    return new Promise((resolve, reject) => {\n      RNFetchBlob.removeSession(sessions[this.name], (err) => {\n        if(err)\n          reject(err)\n        else {\n          delete sessions[this.name]\n          resolve()\n        }\n      })\n    })\n  }\n\n}\n"],"mappings":";;;;SAOCA,qBAAqB;AAGtB,IAAMC,WAAW,GAAGC,aAAa,CAACD,WAAW;AAC7C,IAAME,OAAO,GAAGC,kBAAkB;AAElC,IAAIC,QAAQ,GAAG,CAAC,CAAC;AAAA,IAEIC,kBAAkB;EAoBrC,SAAAA,mBAAYC,IAAW,EAAEC,IAAkB,EAAE;IAAAC,eAAA,OAAAH,kBAAA;IAC3C,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAG,CAACF,QAAQ,CAACE,IAAI,CAAC,EAAE;MAClB,IAAGG,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EACtBH,QAAQ,CAACE,IAAI,CAAC,GAAGC,IAAI,MAErBH,QAAQ,CAACE,IAAI,CAAC,GAAG,EAAE;IACrB;EACF;EAACK,YAAA,CAAAN,kBAAA;IAAAO,GAAA;IAAAC,KAAA,EAED,SAAAC,IAAIC,IAAW,EAAqB;MAClCX,QAAQ,CAAC,IAAI,CAACE,IAAI,CAAC,CAACU,IAAI,CAACD,IAAI,CAAC;MAC9B,OAAO,IAAI;IACb;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAED,SAAAI,OAAOF,IAAW,EAAqB;MACrC,IAAIR,IAAI,GAAGH,QAAQ,CAAC,IAAI,CAACE,IAAI,CAAC;MAC9B,KAAI,IAAIY,CAAC,IAAIX,IAAI,EAAE;QACjB,IAAGA,IAAI,CAACW,CAAC,CAAC,KAAKH,IAAI,EAAE;UACnBX,QAAQ,CAAC,IAAI,CAACE,IAAI,CAAC,CAACa,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;UAChC;QACF;MACF;MACA,OAAO,IAAI;IACb;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAAN,KAAA,EAAqB;MACnB,OAAOH,QAAQ,CAAC,IAAI,CAACE,IAAI,CAAC;IAC5B;EAAC;IAAAM,GAAA;IAAAC,KAAA,EAED,SAAAO,QAAA,EAAkB;MAAA,IAAAC,KAAA;MAChB,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACtCxB,WAAW,CAACyB,aAAa,CAACrB,QAAQ,CAACiB,KAAI,CAACf,IAAI,CAAC,EAAE,UAACoB,GAAG,EAAK;UACtD,IAAGA,GAAG,EACJF,MAAM,CAACE,GAAG,CAAC,MACR;YACH,OAAOtB,QAAQ,CAACiB,KAAI,CAACf,IAAI,CAAC;YAC1BiB,OAAO,CAAC,CAAC;UACX;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EAAC;IAAAX,GAAA;IAAAC,KAAA,EArDD,SAAAc,WAAkBrB,IAAW,EAAM;MACjC,OAAOF,QAAQ,CAACE,IAAI,CAAC;IACvB;EAAC;IAAAM,GAAA;IAAAC,KAAA,EAED,SAAAe,WAAkBtB,IAAW,EAAEuB,GAAO,EAAE;MACtCzB,QAAQ,CAACE,IAAI,CAAC,GAAGuB,GAAG;IACtB;EAAC;IAAAjB,GAAA;IAAAC,KAAA,EAED,SAAAY,cAAqBnB,IAAW,EAAE;MAChC,OAAOF,QAAQ,CAACE,IAAI,CAAC;IACvB;EAAC;EAAA,OAAAD,kBAAA;AAAA;AAAA,SAlBkBA,kBAAkB,IAAAyB,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}