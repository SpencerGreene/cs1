{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { CLOCKSTATES } from \"../scoutConfig\";\nimport AppColors from \"../styles/AppColors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar CountdownTimer = function CountdownTimer(_ref) {\n  var initialTime = _ref.initialTime,\n    clockState = _ref.clockState,\n    timeoutTime = _ref.timeoutTime,\n    onTimeout = _ref.onTimeout;\n  var _useState = useState(initialTime),\n    _useState2 = _slicedToArray(_useState, 2),\n    time = _useState2[0],\n    setTime = _useState2[1];\n  var intervalRef = useRef(null);\n  useEffect(function () {\n    return function () {\n      return clearInterval(intervalRef.current);\n    };\n  }, []);\n  useEffect(function () {\n    if (clockState === CLOCKSTATES.running) {\n      intervalRef.current = setInterval(function () {\n        setTime(function (prevTime) {\n          return prevTime - 1;\n        });\n      }, 1000);\n    } else {\n      setTime(initialTime);\n      clearInterval(intervalRef.current);\n    }\n    return function () {\n      return clearInterval(intervalRef.current);\n    };\n  }, [clockState]);\n  useEffect(function () {\n    if (clockState !== CLOCKSTATES.running) {\n      setTime(initialTime);\n    }\n  }, [initialTime]);\n  useEffect(function () {\n    if (time === timeoutTime) {\n      onTimeout();\n    }\n  }, [time]);\n  var formatTime = function formatTime(seconds) {\n    var sign = seconds < 0 ? '-' : '';\n    var absoluteSeconds = Math.abs(seconds);\n    var minutes = Math.floor(absoluteSeconds / 60);\n    var remainingSeconds = absoluteSeconds % 60;\n    return `${sign}${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n  };\n  return _jsx(View, {\n    children: clockState !== CLOCKSTATES.hidden && _jsx(Text, {\n      style: styles.clockLabel,\n      children: formatTime(time)\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  clockLabel: {\n    fontSize: 19,\n    color: AppColors.bodyText,\n    fontWeight: '500',\n    alignSelf: 'flex-end'\n  }\n});\nexport default CountdownTimer;","map":{"version":3,"names":["React","useState","useEffect","useRef","View","Text","StyleSheet","CLOCKSTATES","AppColors","jsx","_jsx","CountdownTimer","_ref","initialTime","clockState","timeoutTime","onTimeout","_useState","_useState2","_slicedToArray","time","setTime","intervalRef","clearInterval","current","running","setInterval","prevTime","formatTime","seconds","sign","absoluteSeconds","Math","abs","minutes","floor","remainingSeconds","children","hidden","style","styles","clockLabel","create","fontSize","color","bodyText","fontWeight","alignSelf"],"sources":["/Users/sgreene/src/cs1/components/CountdownTimer.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nimport { CLOCKSTATES } from '../scoutConfig';\nimport AppColors from '../styles/AppColors';\n\nconst CountdownTimer = ({ initialTime, clockState, timeoutTime, onTimeout }) => {\n    const [time, setTime] = useState(initialTime);\n    const intervalRef = useRef(null);\n\n    useEffect(() => {\n        // Clear any existing interval when unmounting\n        return () => clearInterval(intervalRef.current);\n    }, []);\n\n    useEffect(() => {\n        if (clockState === CLOCKSTATES.running) {\n            intervalRef.current = setInterval(() => {\n                setTime((prevTime) => {\n                    // if (prevTime - 1 === timeoutTime) onTimeout();\n                    return prevTime - 1;\n                });\n            }, 1000);\n        } else {\n            // Clear the interval when isRunning becomes false\n            setTime(initialTime);\n            clearInterval(intervalRef.current);\n        }\n\n        // clear when component unmounts or clockState changes\n        return () => clearInterval(intervalRef.current);\n    }, [clockState]);\n\n    useEffect(() => {\n        // Reset the timer when initialTime changes\n        if (clockState !== CLOCKSTATES.running) {\n            setTime(initialTime);\n        }\n    }, [initialTime]);\n\n    useEffect(() => {\n        // Check for timeout when the time changes\n        if (time === timeoutTime) {\n            onTimeout();\n        }\n    }, [time]);\n\n    const formatTime = (seconds) => {\n        const sign = seconds < 0 ? '-' : '';\n        const absoluteSeconds = Math.abs(seconds);\n        const minutes = Math.floor(absoluteSeconds / 60);\n        const remainingSeconds = absoluteSeconds % 60;\n\n        return `${sign}${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n    };\n\n    return (\n        <View>\n            {clockState !== CLOCKSTATES.hidden &&\n                <Text style={styles.clockLabel}>\n                    {formatTime(time)}\n                </Text>}\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    clockLabel: {\n        fontSize: 19,\n        color: AppColors.bodyText,\n        fontWeight: '500',\n        alignSelf: 'flex-end',\n    },\n});\n\nexport default CountdownTimer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}