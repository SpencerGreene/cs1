{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { useContext, useEffect } from 'react';\nimport Button from \"../components/Button\";\nimport BubbleApi from \"../api/BubbleApi\";\nimport Styles from \"../styles/Styles\";\nimport { AuthContext } from \"../components/AuthProvider\";\nimport BlueAllianceApi from \"../api/BlueAllianceApi\";\nimport { UserInterfaceIdiom } from 'expo-constants';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ScoutPage() {\n  var _useContext = useContext(AuthContext),\n    userInfo = _useContext.userInfo,\n    logout = _useContext.logout,\n    appVariables = _useContext.appVariables,\n    setAppVariables = _useContext.setAppVariables,\n    eventMatches = _useContext.eventMatches,\n    setEventMatches = _useContext.setEventMatches,\n    colorDict = _useContext.colorDict,\n    setColorDict = _useContext.setColorDict;\n  useEffect(function () {\n    var populateAppVariables = function () {\n      var _ref = _asyncToGenerator(function* () {\n        var storedAppVariables = yield AsyncStorage.getItem('appVariables');\n        if (storedAppVariables) {\n          setAppVariables(JSON.parse(storedAppVariables));\n          console.log('app variables found in cache');\n        } else {\n          var apiAppVariables = yield BubbleApi.getAppVariables();\n          setAppVariables(apiFirstObject);\n          yield AsyncStorage.setItem('appVariables', JSON.stringify(apiAppVariables));\n          console.log('app variables loaded from api');\n        }\n      });\n      return function populateAppVariables() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    populateAppVariables();\n  }, []);\n  useEffect(function () {\n    var populateMatches = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        if (!appVariables || !appVariables.eventKey) return;\n        console.log('appVariables exists', appVariables);\n        var storedEventMatches = yield AsyncStorage.getItem('eventMatches');\n        if (storedEventMatches) {\n          var parsedEventMatches = JSON.parse(storedEventMatches);\n          if (parsedEventMatches.event === appVariables.eventKey) {\n            setEventMatches(JSON.parse(storedEventMatches));\n            console.log('event matches found in cache');\n            return;\n          }\n        } else {\n          var apiEventMatches = yield BlueAllianceApi.fetchMatches(appVariables.eventKey);\n          setEventMatches(apiEventMatches);\n          yield AsyncStorage.setItem('eventMatches', JSON.stringify(apiEventMatches));\n          console.log('event matches loaded from api');\n        }\n      });\n      return function populateMatches() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    populateMatches();\n  }, [appVariables]);\n  useEffect(function () {\n    var populateColorDict = function () {\n      var _ref3 = _asyncToGenerator(function* () {\n        if (!userInfo) return;\n        var storedColorDict = yield AsyncStorage.getItem('colorDict');\n        if (storedColorDict) {\n          setColorDict(JSON.parse(storedColorDict));\n          console.log('color dict found in cache');\n        } else {\n          var apiColorDict = yield BubbleApi.getColorDict(userInfo.team);\n          setColorDict(apiColorDict);\n          yield AsyncStorage.setItem('colorDict', JSON.stringify(apiColorDict));\n          console.log('color dict loaded from api');\n        }\n      });\n      return function populateColorDict() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    populateColorDict();\n  }, [userInfo]);\n  return _jsxs(View, {\n    style: Styles.column30,\n    children: [_jsx(Image, {\n      style: styles.image,\n      source: require(\"../assets/loginlogo.jpg\")\n    }), _jsx(View, {\n      id: \"textBlock\",\n      children: _jsxs(View, {\n        style: Styles.groupLeft,\n        children: [_jsxs(Text, {\n          style: [Styles.mediumTitle, styles.loginTitle],\n          children: [\"Welcome \", userInfo.name]\n        }), _jsx(Button, {\n          label: \"Log out\",\n          theme: \"primary\",\n          onPress: logout\n        })]\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  bottomNotes: {\n    marginTop: 60,\n    marginBottom: 100\n  },\n  loginTitle: {\n    marginTop: 30,\n    marginBottom: 12\n  },\n  image: {\n    width: 192,\n    height: 51.5,\n    alignSelf: 'center',\n    marginBottom: 30,\n    marginTop: 100\n  }\n});","map":{"version":3,"names":["AsyncStorage","React","useContext","useEffect","Button","BubbleApi","Styles","AuthContext","BlueAllianceApi","UserInterfaceIdiom","jsx","_jsx","jsxs","_jsxs","ScoutPage","_useContext","userInfo","logout","appVariables","setAppVariables","eventMatches","setEventMatches","colorDict","setColorDict","populateAppVariables","_ref","_asyncToGenerator","storedAppVariables","getItem","JSON","parse","console","log","apiAppVariables","getAppVariables","apiFirstObject","setItem","stringify","apply","arguments","populateMatches","_ref2","eventKey","storedEventMatches","parsedEventMatches","event","apiEventMatches","fetchMatches","populateColorDict","_ref3","storedColorDict","apiColorDict","getColorDict","team","View","style","column30","children","Image","styles","image","source","require","id","groupLeft","Text","mediumTitle","loginTitle","name","label","theme","onPress","StyleSheet","create","bottomNotes","marginTop","marginBottom","width","height","alignSelf"],"sources":["/Users/sgreene/src/cs1/pages/ScoutPage.js"],"sourcesContent":["import { StyleSheet, Text, View, TextInput, Image } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport React, { useContext, useEffect } from 'react';\nimport Button from '../components/Button';\nimport BubbleApi from '../api/BubbleApi';\n\nimport Styles from '../styles/Styles';\nimport { AuthContext } from '../components/AuthProvider';\nimport BlueAllianceApi from '../api/BlueAllianceApi';\nimport { UserInterfaceIdiom } from 'expo-constants';\n\nexport default function ScoutPage() {\n    const {\n        userInfo, logout, \n        appVariables, setAppVariables, \n        eventMatches, setEventMatches,\n        colorDict, setColorDict,\n    } = useContext(AuthContext);\n\n    // get appVariables from cache or api\n    useEffect(() => {\n        const populateAppVariables = async () => {\n            // Check if appVariables is in AsyncStorage\n            const storedAppVariables = await AsyncStorage.getItem('appVariables');\n\n            if (storedAppVariables) {\n                // If it exists, set it in the state\n                setAppVariables(JSON.parse(storedAppVariables));\n                console.log('app variables found in cache');\n            } else {\n                // If not, fetch it from the API\n                const apiAppVariables = await BubbleApi.getAppVariables();\n                setAppVariables(apiFirstObject);\n\n                // Store it in AsyncStorage for future use\n                await AsyncStorage.setItem('appVariables', JSON.stringify(apiAppVariables));\n                console.log('app variables loaded from api');\n            }\n        };\n\n        populateAppVariables();\n    }, []); // Empty dependency array to run only on mount\n\n    // get eventMatches from cache or API - depends on appVariables\n    useEffect(() => {\n        const populateMatches = async () => {\n            if (!appVariables || !appVariables.eventKey) return;\n            console.log('appVariables exists', appVariables);\n\n            const storedEventMatches = await AsyncStorage.getItem('eventMatches');\n            if (storedEventMatches) {\n                // If it exists, set it in the state\n                const parsedEventMatches = JSON.parse(storedEventMatches);\n                if (parsedEventMatches.event === appVariables.eventKey) {\n                    setEventMatches(JSON.parse(storedEventMatches));\n                    console.log('event matches found in cache');\n                    return;\n                }\n                // if the event key mismatches, then ignore the cache\n            } else {\n                // If not, fetch it from the API\n                const apiEventMatches = await BlueAllianceApi.fetchMatches(appVariables.eventKey);\n                setEventMatches(apiEventMatches);\n\n                // Store it in AsyncStorage for future use\n                await AsyncStorage.setItem('eventMatches', JSON.stringify(apiEventMatches));\n                console.log('event matches loaded from api');\n            }\n        };\n\n        populateMatches();\n    }, [appVariables]); // Trigger only when appVariables changes\n\n    // get colorDict from cache or API - depends on userInfo\n    useEffect(() => {\n        const populateColorDict = async () => {\n            if (!userInfo) return;\n\n            const storedColorDict = await AsyncStorage.getItem('colorDict');\n            if (storedColorDict) {\n                // If it exists, set it in the state\n                setColorDict(JSON.parse(storedColorDict));\n                console.log('color dict found in cache');\n            } else {\n                // If not, fetch it from the API\n                const apiColorDict = await BubbleApi.getColorDict(userInfo.team);\n                setColorDict(apiColorDict);\n\n                // Store it in AsyncStorage for future use\n                await AsyncStorage.setItem('colorDict', JSON.stringify(apiColorDict));\n                console.log('color dict loaded from api');\n\n            }\n        };\n\n        populateColorDict();\n    }, [userInfo]); // Trigger only when appVariables changes\n\n    // const colorDict = await BubbleApi.getColorDict(userInfo.team);\n\n    return (\n        <View style={Styles.column30}>\n            <Image style={styles.image} source={require(\"../assets/loginlogo.jpg\")} />\n            <View id=\"textBlock\">\n                <View style={Styles.groupLeft}>\n                    <Text style={[Styles.mediumTitle, styles.loginTitle]}>Welcome {userInfo.name}</Text>\n                    <Button label=\"Log out\" theme=\"primary\" onPress={logout} />\n                </View>\n            </View>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    bottomNotes: {\n        marginTop: 60,\n        marginBottom: 100,\n    },\n    loginTitle: {\n        marginTop: 30,\n        marginBottom: 12,\n    },\n    image: {\n        width: 192,\n        height: 51.5,\n        alignSelf: 'center',\n        marginBottom: 30,\n        marginTop: 100,\n    },\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}