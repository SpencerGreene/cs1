{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { NativeAppEventEmitter } from \"react-native-web/dist/index\";\nimport RNFetchBlobSession from \"./class/RNFetchBlobSession\";\nimport RNFetchBlobWriteStream from \"./class/RNFetchBlobWriteStream\";\nimport RNFetchBlobReadStream from \"./class/RNFetchBlobReadStream\";\nimport RNFetchBlobFile from \"./class/RNFetchBlobFile\";\nvar RNFetchBlob = NativeModules.RNFetchBlob;\nvar emitter = DeviceEventEmitter;\nvar dirs = {\n  DocumentDir: RNFetchBlob.DocumentDir,\n  CacheDir: RNFetchBlob.CacheDir,\n  PictureDir: RNFetchBlob.PictureDir,\n  MusicDir: RNFetchBlob.MusicDir,\n  MovieDir: RNFetchBlob.MovieDir,\n  DownloadDir: RNFetchBlob.DownloadDir,\n  DCIMDir: RNFetchBlob.DCIMDir,\n  SDCardDir: RNFetchBlob.SDCardDir,\n  SDCardApplicationDir: RNFetchBlob.SDCardApplicationDir,\n  MainBundleDir: RNFetchBlob.MainBundleDir,\n  LibraryDir: RNFetchBlob.LibraryDir\n};\nfunction session(name) {\n  var s = RNFetchBlobSession.getSession(name);\n  if (s) return new RNFetchBlobSession(name);else {\n    RNFetchBlobSession.setSession(name, []);\n    return new RNFetchBlobSession(name, []);\n  }\n}\nfunction asset(path) {\n  if (Platform.OS === 'ios') {\n    if (/^assets-library\\:\\/\\//.test(path)) return path;\n  }\n  return 'bundle-assets://' + path;\n}\nfunction createFile(path, data, encoding) {\n  encoding = encoding || 'utf8';\n  return new Promise(function (resolve, reject) {\n    var handler = function handler(err) {\n      if (err) reject(new Error(err));else resolve();\n    };\n    if (encoding.toLowerCase() === 'ascii') {\n      if (Array.isArray(data)) RNFetchBlob.createFileASCII(path, data, handler);else reject(new Error('`data` of ASCII file must be an array contains numbers'));\n    } else {\n      RNFetchBlob.createFile(path, data, encoding, handler);\n    }\n  });\n}\nfunction writeStream(path, encoding, append) {\n  if (!path) throw Error('RNFetchBlob could not open file stream with empty `path`');\n  encoding = encoding || 'utf8';\n  append = append || false;\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.writeStream(path, encoding || 'base64', append || false, function (err, streamId) {\n      if (err) reject(new Error(err));else resolve(new RNFetchBlobWriteStream(streamId, encoding));\n    });\n  });\n}\nfunction readStream(path, encoding, bufferSize) {\n  var tick = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n  return Promise.resolve(new RNFetchBlobReadStream(path, encoding, bufferSize, tick));\n}\nfunction mkdir(path) {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.mkdir(path, function (err, res) {\n      if (err) reject(new Error(err));else resolve();\n    });\n  });\n}\nfunction pathForAppGroup(groupName) {\n  return RNFetchBlob.pathForAppGroup(groupName);\n}\nfunction readFile(path, encoding, bufferSize) {\n  if (typeof path !== 'string') return Promise.reject(new Error('Invalid argument \"path\" '));\n  return RNFetchBlob.readFile(path, encoding);\n}\nfunction writeFile(path, data, encoding) {\n  encoding = encoding || 'utf8';\n  if (typeof path !== 'string') return Promise.reject('Invalid argument \"path\" ');\n  if (encoding.toLocaleLowerCase() === 'ascii') {\n    if (!Array.isArray(data)) return Promise.reject(new Error(`Expected \"data\" is an Array when encoding is \"ascii\", however got ${typeof data}`));else return RNFetchBlob.writeFileArray(path, data, false);\n  } else {\n    if (typeof data !== 'string') return Promise.reject(new Error(`Expected \"data\" is a String when encoding is \"utf8\" or \"base64\", however got ${typeof data}`));else return RNFetchBlob.writeFile(path, encoding, data, false);\n  }\n}\nfunction appendFile(path, data, encoding) {\n  encoding = encoding || 'utf8';\n  if (typeof path !== 'string') return Promise.reject('Invalid argument \"path\" ');\n  if (encoding.toLocaleLowerCase() === 'ascii') {\n    if (!Array.isArray(data)) return Promise.reject(new Error(`Expected \"data\" is an Array when encoding is \"ascii\", however got ${typeof data}`));else return RNFetchBlob.writeFileArray(path, data, true);\n  } else {\n    if (typeof data !== 'string') return Promise.reject(new Error(`Expected \"data\" is a String when encoding is \"utf8\" or \"base64\", however got ${typeof data}`));else return RNFetchBlob.writeFile(path, encoding, data, true);\n  }\n}\nfunction stat(path) {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.stat(path, function (err, stat) {\n      if (err) reject(new Error(err));else {\n        if (stat) {\n          stat.size = parseInt(stat.size);\n          stat.lastModified = parseInt(stat.lastModified);\n        }\n        resolve(stat);\n      }\n    });\n  });\n}\nfunction scanFile(pairs) {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.scanFile(pairs, function (err) {\n      if (err) reject(new Error(err));else resolve();\n    });\n  });\n}\nfunction cp(path, dest) {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.cp(path, dest, function (err, res) {\n      if (err) reject(new Error(err));else resolve(res);\n    });\n  });\n}\nfunction mv(path, dest) {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.mv(path, dest, function (err, res) {\n      if (err) reject(new Error(err));else resolve(res);\n    });\n  });\n}\nfunction lstat(path) {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.lstat(path, function (err, stat) {\n      if (err) reject(new Error(err));else resolve(stat);\n    });\n  });\n}\nfunction ls(path) {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.ls(path, function (err, res) {\n      if (err) reject(new Error(err));else resolve(res);\n    });\n  });\n}\nfunction unlink(path) {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.unlink(path, function (err) {\n      if (err) {\n        reject(new Error(err));\n      } else resolve();\n    });\n  });\n}\nfunction exists(path) {\n  return new Promise(function (resolve, reject) {\n    try {\n      RNFetchBlob.exists(path, function (exist) {\n        resolve(exist);\n      });\n    } catch (err) {\n      reject(new Error(err));\n    }\n  });\n}\nfunction slice(src, dest, start, end) {\n  var p = Promise.resolve();\n  var size = 0;\n  function normalize(num, size) {\n    if (num < 0) return Math.max(0, size + num);\n    if (!num && num !== 0) return size;\n    return num;\n  }\n  if (start < 0 || end < 0 || !start || !end) {\n    p = p.then(function () {\n      return stat(src);\n    }).then(function (stat) {\n      size = Math.floor(stat.size);\n      start = normalize(start || 0, size);\n      end = normalize(end, size);\n      return Promise.resolve();\n    });\n  }\n  return p.then(function () {\n    return RNFetchBlob.slice(src, dest, start, end);\n  });\n}\nfunction isDir(path) {\n  return new Promise(function (resolve, reject) {\n    try {\n      RNFetchBlob.exists(path, function (exist, isDir) {\n        resolve(isDir);\n      });\n    } catch (err) {\n      reject(new Error(err));\n    }\n  });\n}\nfunction df() {\n  return new Promise(function (resolve, reject) {\n    RNFetchBlob.df(function (err, stat) {\n      if (err) reject(err);else resolve(stat);\n    });\n  });\n}\nexport default {\n  RNFetchBlobSession: RNFetchBlobSession,\n  unlink: unlink,\n  mkdir: mkdir,\n  session: session,\n  ls: ls,\n  readStream: readStream,\n  mv: mv,\n  cp: cp,\n  writeStream: writeStream,\n  writeFile: writeFile,\n  appendFile: appendFile,\n  pathForAppGroup: pathForAppGroup,\n  readFile: readFile,\n  exists: exists,\n  createFile: createFile,\n  isDir: isDir,\n  stat: stat,\n  lstat: lstat,\n  scanFile: scanFile,\n  dirs: dirs,\n  slice: slice,\n  asset: asset,\n  df: df\n};","map":{"version":3,"names":["NativeAppEventEmitter","RNFetchBlobSession","RNFetchBlobWriteStream","RNFetchBlobReadStream","RNFetchBlobFile","RNFetchBlob","NativeModules","emitter","DeviceEventEmitter","dirs","DocumentDir","CacheDir","PictureDir","MusicDir","MovieDir","DownloadDir","DCIMDir","SDCardDir","SDCardApplicationDir","MainBundleDir","LibraryDir","session","name","s","getSession","setSession","asset","path","Platform","OS","test","createFile","data","encoding","Promise","resolve","reject","handler","err","Error","toLowerCase","Array","isArray","createFileASCII","writeStream","append","streamId","readStream","bufferSize","tick","arguments","length","undefined","mkdir","res","pathForAppGroup","groupName","readFile","writeFile","toLocaleLowerCase","writeFileArray","appendFile","stat","size","parseInt","lastModified","scanFile","pairs","cp","dest","mv","lstat","ls","unlink","exists","exist","slice","src","start","end","p","normalize","num","Math","max","then","floor","isDir","df"],"sources":["/Users/sgreene/src/cs1/node_modules/react-native-fetch-blob/fs.js"],"sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport {\n  NativeModules,\n  DeviceEventEmitter,\n  Platform,\n  NativeAppEventEmitter,\n} from 'react-native'\nimport RNFetchBlobSession from './class/RNFetchBlobSession'\nimport RNFetchBlobWriteStream from './class/RNFetchBlobWriteStream'\nimport RNFetchBlobReadStream from './class/RNFetchBlobReadStream'\nimport RNFetchBlobFile from './class/RNFetchBlobFile'\nimport type {\n  RNFetchBlobNative,\n  RNFetchBlobConfig,\n  RNFetchBlobStream\n} from './types'\n\nconst RNFetchBlob:RNFetchBlobNative = NativeModules.RNFetchBlob\nconst emitter = DeviceEventEmitter\nconst dirs = {\n    DocumentDir :  RNFetchBlob.DocumentDir,\n    CacheDir : RNFetchBlob.CacheDir,\n    PictureDir : RNFetchBlob.PictureDir,\n    MusicDir : RNFetchBlob.MusicDir,\n    MovieDir : RNFetchBlob.MovieDir,\n    DownloadDir : RNFetchBlob.DownloadDir,\n    DCIMDir : RNFetchBlob.DCIMDir,\n    SDCardDir : RNFetchBlob.SDCardDir,\n    SDCardApplicationDir : RNFetchBlob.SDCardApplicationDir,\n    MainBundleDir : RNFetchBlob.MainBundleDir,\n    LibraryDir : RNFetchBlob.LibraryDir\n}\n\n/**\n * Get a file cache session\n * @param  {string} name Stream ID\n * @return {RNFetchBlobSession}\n */\nfunction session(name:string):RNFetchBlobSession {\n  let s = RNFetchBlobSession.getSession(name)\n  if(s)\n    return new RNFetchBlobSession(name)\n  else {\n    RNFetchBlobSession.setSession(name, [])\n    return new RNFetchBlobSession(name, [])\n  }\n}\n\nfunction asset(path:string):string {\n  if(Platform.OS === 'ios') {\n    // path from camera roll\n    if(/^assets-library\\:\\/\\//.test(path))\n      return path\n  }\n  return 'bundle-assets://' + path\n}\n\nfunction createFile(path:string, data:string, encoding: 'base64' | 'ascii' | 'utf8'):Promise {\n  encoding = encoding || 'utf8'\n  return new Promise((resolve, reject) => {\n    let handler = (err) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve()\n    }\n    if(encoding.toLowerCase() === 'ascii') {\n      if(Array.isArray(data))\n        RNFetchBlob.createFileASCII(path, data, handler)\n      else\n        reject(new Error('`data` of ASCII file must be an array contains numbers'))\n    }\n    else {\n      RNFetchBlob.createFile(path, data, encoding, handler)\n    }\n  })\n}\n\n/**\n * Create write stream to a file.\n * @param  {string} path Target path of file stream.\n * @param  {string} encoding Encoding of input data.\n * @param  {bool} append  A flag represent if data append to existing ones.\n * @return {Promise<WriteStream>} A promise resolves a `WriteStream` object.\n */\nfunction writeStream(\n  path : string,\n  encoding : 'utf8' | 'ascii' | 'base64',\n  append? : ?bool,\n):Promise<RNFetchBlobWriteStream> {\n  if(!path)\n    throw Error('RNFetchBlob could not open file stream with empty `path`')\n  encoding = encoding || 'utf8'\n  append = append || false\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.writeStream(path, encoding || 'base64', append || false, (err, streamId:string) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve(new RNFetchBlobWriteStream(streamId, encoding))\n    })\n  })\n}\n\n/**\n * Create file stream from file at `path`.\n * @param  {string} path   The file path.\n * @param  {string} encoding Data encoding, should be one of `base64`, `utf8`, `ascii`\n * @param  {boolean} bufferSize Size of stream buffer.\n * @return {RNFetchBlobStream} RNFetchBlobStream stream instance.\n */\nfunction readStream(\n  path : string,\n  encoding : 'utf8' | 'ascii' | 'base64',\n  bufferSize? : ?number,\n  tick : ?number = 10\n):Promise<RNFetchBlobReadStream> {\n  return Promise.resolve(new RNFetchBlobReadStream(path, encoding, bufferSize, tick))\n}\n\n/**\n * Create a directory.\n * @param  {string} path Path of directory to be created\n * @return {Promise}\n */\nfunction mkdir(path:string):Promise {\n\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.mkdir(path, (err, res) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve()\n    })\n  })\n\n}\n\n/**\n * Returns the path for the app group.\n * @param  {string} groupName Name of app group\n * @return {Promise}\n */\nfunction pathForAppGroup(groupName:string):Promise {\n  return RNFetchBlob.pathForAppGroup(groupName);\n}\n\n/**\n * Wrapper method of readStream.\n * @param  {string} path Path of the file.\n * @param  {'base64' | 'utf8' | 'ascii'} encoding Encoding of read stream.\n * @return {Promise<Array<number> | string>}\n */\nfunction readFile(path:string, encoding:string, bufferSize:?number):Promise<any> {\n  if(typeof path !== 'string')\n    return Promise.reject(new Error('Invalid argument \"path\" '))\n  return RNFetchBlob.readFile(path, encoding)\n}\n\n/**\n * Write data to file.\n * @param  {string} path  Path of the file.\n * @param  {string | number[]} data Data to write to the file.\n * @param  {string} encoding Encoding of data (Optional).\n * @return {Promise}\n */\nfunction writeFile(path:string, data:string | Array<number>, encoding:?string):Promise {\n  encoding = encoding || 'utf8'\n  if(typeof path !== 'string')\n    return Promise.reject('Invalid argument \"path\" ')\n  if(encoding.toLocaleLowerCase() === 'ascii') {\n    if(!Array.isArray(data))\n      return Promise.reject(new Error(`Expected \"data\" is an Array when encoding is \"ascii\", however got ${typeof data}`))\n    else\n      return RNFetchBlob.writeFileArray(path, data, false);\n  } else {\n    if(typeof data !== 'string')\n      return Promise.reject(new Error(`Expected \"data\" is a String when encoding is \"utf8\" or \"base64\", however got ${typeof data}`))\n    else\n      return RNFetchBlob.writeFile(path, encoding, data, false);\n  }\n}\n\nfunction appendFile(path:string, data:string | Array<number>, encoding:?string):Promise {\n  encoding = encoding || 'utf8'\n  if(typeof path !== 'string')\n    return Promise.reject('Invalid argument \"path\" ')\n  if(encoding.toLocaleLowerCase() === 'ascii') {\n    if(!Array.isArray(data))\n      return Promise.reject(new Error(`Expected \"data\" is an Array when encoding is \"ascii\", however got ${typeof data}`))\n    else\n      return RNFetchBlob.writeFileArray(path, data, true);\n  } else {\n    if(typeof data !== 'string')\n      return Promise.reject(new Error(`Expected \"data\" is a String when encoding is \"utf8\" or \"base64\", however got ${typeof data}`))\n    else\n      return RNFetchBlob.writeFile(path, encoding, data, true);\n  }\n}\n\n/**\n * Show statistic data of a path.\n * @param  {string} path Target path\n * @return {RNFetchBlobFile}\n */\nfunction stat(path:string):Promise<RNFetchBlobFile> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.stat(path, (err, stat) => {\n      if(err)\n        reject(new Error(err))\n      else {\n        if(stat) {\n          stat.size = parseInt(stat.size)\n          stat.lastModified = parseInt(stat.lastModified)\n        }\n        resolve(stat)\n      }\n    })\n  })\n}\n\n/**\n * Android only method, request media scanner to scan the file.\n * @param  {Array<Object<string, string>>} Array contains Key value pairs with key `path` and `mime`.\n * @return {Promise}\n */\nfunction scanFile(pairs:any):Promise {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.scanFile(pairs, (err) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve()\n    })\n  })\n}\n\nfunction cp(path:string, dest:string):Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.cp(path, dest, (err, res) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve(res)\n    })\n  })\n}\n\nfunction mv(path:string, dest:string):Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.mv(path, dest, (err, res) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve(res)\n    })\n  })\n}\n\nfunction lstat(path:string):Promise<Array<RNFetchBlobFile>> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.lstat(path, (err, stat) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve(stat)\n    })\n  })\n}\n\nfunction ls(path:string):Promise<Array<String>> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.ls(path, (err, res) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve(res)\n    })\n  })\n}\n\n/**\n * Remove file at path.\n * @param  {string}   path:string Path of target file.\n * @return {Promise}\n */\nfunction unlink(path:string):Promise {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.unlink(path, (err) => {\n      if(err) {\n        reject(new Error(err))\n      }\n      else\n        resolve()\n    })\n  })\n}\n\n/**\n * Check if file exists and if it is a folder.\n * @param  {string} path Path to check\n * @return {Promise<bool, bool>}\n */\nfunction exists(path:string):Promise<bool, bool> {\n\n  return new Promise((resolve, reject) => {\n    try {\n      RNFetchBlob.exists(path, (exist) => {\n        resolve(exist)\n      })\n    } catch(err) {\n      reject(new Error(err))\n    }\n  })\n\n}\n\nfunction slice(src:string, dest:string, start:number, end:number):Promise {\n  let p = Promise.resolve()\n  let size = 0\n  function normalize(num, size) {\n    if(num < 0)\n      return Math.max(0, size + num)\n    if(!num && num !== 0)\n      return size\n    return num\n  }\n  if(start < 0 || end < 0 || !start || !end) {\n    p = p.then(() => stat(src))\n         .then((stat) => {\n           size = Math.floor(stat.size)\n           start = normalize(start || 0, size)\n           end = normalize(end, size)\n           return Promise.resolve()\n         })\n  }\n  return p.then(() => RNFetchBlob.slice(src, dest, start, end))\n}\n\nfunction isDir(path:string):Promise<bool, bool> {\n\n  return new Promise((resolve, reject) => {\n    try {\n      RNFetchBlob.exists(path, (exist, isDir) => {\n        resolve(isDir)\n      })\n    } catch(err) {\n      reject(new Error(err))\n    }\n  })\n\n}\n\nfunction df():Promise<{ free : number, total : number }> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.df((err, stat) => {\n      if(err)\n        reject(err)\n      else\n        resolve(stat)\n    })\n  })\n}\n\nexport default {\n  RNFetchBlobSession,\n  unlink,\n  mkdir,\n  session,\n  ls,\n  readStream,\n  mv,\n  cp,\n  writeStream,\n  writeFile,\n  appendFile,\n  pathForAppGroup,\n  readFile,\n  exists,\n  createFile,\n  isDir,\n  stat,\n  lstat,\n  scanFile,\n  dirs,\n  slice,\n  asset,\n  df\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}