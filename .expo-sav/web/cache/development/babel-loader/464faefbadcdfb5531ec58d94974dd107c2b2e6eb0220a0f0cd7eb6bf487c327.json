{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { NativeAppEventEmitter } from \"react-native-web/dist/index\";\nvar RNFetchBlob = NativeModules.RNFetchBlob;\nfunction actionViewIntent(path) {\n  var mime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'text/plain';\n  if (Platform.OS === 'android') return RNFetchBlob.actionViewIntent(path, mime);else return Promise.reject('RNFetchBlob.android.actionViewIntent only supports Android.');\n}\nfunction getContentIntent(mime) {\n  if (Platform.OS === 'android') return RNFetchBlob.getContentIntent(mime);else return Promise.reject('RNFetchBlob.android.getContentIntent only supports Android.');\n}\nfunction addCompleteDownload(config) {\n  if (Platform.OS === 'android') return RNFetchBlob.addCompleteDownload(config);else return Promise.reject('RNFetchBlob.android.addCompleteDownload only supports Android.');\n}\nexport default {\n  actionViewIntent: actionViewIntent,\n  getContentIntent: getContentIntent,\n  addCompleteDownload: addCompleteDownload\n};","map":{"version":3,"names":["NativeAppEventEmitter","RNFetchBlob","NativeModules","actionViewIntent","path","mime","arguments","length","undefined","Platform","OS","Promise","reject","getContentIntent","addCompleteDownload","config"],"sources":["/Users/sgreene/src/cs1/node_modules/react-native-fetch-blob/android.js"],"sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport {\n  NativeModules,\n  DeviceEventEmitter,\n  Platform,\n  NativeAppEventEmitter,\n} from 'react-native'\n\nconst RNFetchBlob:RNFetchBlobNative = NativeModules.RNFetchBlob\n\n/**\n * Send an intent to open the file.\n * @param  {string]} path Path of the file to be open.\n * @param  {string} mime MIME type string\n * @return {Promise}\n */\nfunction actionViewIntent(path:string, mime:string = 'text/plain') {\n  if(Platform.OS === 'android')\n    return RNFetchBlob.actionViewIntent(path, mime)\n  else\n    return Promise.reject('RNFetchBlob.android.actionViewIntent only supports Android.')\n}\n\nfunction getContentIntent(mime:string) {\n  if(Platform.OS === 'android')\n    return RNFetchBlob.getContentIntent(mime)\n  else\n    return Promise.reject('RNFetchBlob.android.getContentIntent only supports Android.')\n}\n\nfunction addCompleteDownload(config) {\n  if(Platform.OS === 'android')\n    return RNFetchBlob.addCompleteDownload(config)\n  else\n    return Promise.reject('RNFetchBlob.android.addCompleteDownload only supports Android.')\n}\n\n\nexport default {\n  actionViewIntent,\n  getContentIntent,\n  addCompleteDownload\n}\n"],"mappings":";;;SAQEA,qBAAqB;AAGvB,IAAMC,WAA6B,GAAGC,aAAa,CAACD,WAAW;AAQ/D,SAASE,gBAAgBA,CAACC,IAAW,EAA8B;EAAA,IAA5BC,IAAW,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,YAAY;EAC/D,IAAGG,QAAQ,CAACC,EAAE,KAAK,SAAS,EAC1B,OAAOT,WAAW,CAACE,gBAAgB,CAACC,IAAI,EAAEC,IAAI,CAAC,MAE/C,OAAOM,OAAO,CAACC,MAAM,CAAC,6DAA6D,CAAC;AACxF;AAEA,SAASC,gBAAgBA,CAACR,IAAW,EAAE;EACrC,IAAGI,QAAQ,CAACC,EAAE,KAAK,SAAS,EAC1B,OAAOT,WAAW,CAACY,gBAAgB,CAACR,IAAI,CAAC,MAEzC,OAAOM,OAAO,CAACC,MAAM,CAAC,6DAA6D,CAAC;AACxF;AAEA,SAASE,mBAAmBA,CAACC,MAAM,EAAE;EACnC,IAAGN,QAAQ,CAACC,EAAE,KAAK,SAAS,EAC1B,OAAOT,WAAW,CAACa,mBAAmB,CAACC,MAAM,CAAC,MAE9C,OAAOJ,OAAO,CAACC,MAAM,CAAC,gEAAgE,CAAC;AAC3F;AAGA,eAAe;EACbT,gBAAgB,EAAhBA,gBAAgB;EAChBU,gBAAgB,EAAhBA,gBAAgB;EAChBC,mBAAmB,EAAnBA;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}