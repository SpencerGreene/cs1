{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { NativeAppEventEmitter } from \"react-native-web/dist/index\";\nvar RNFetchBlob = NativeModules.RNFetchBlob;\nfunction previewDocument(path, scheme) {\n  if (Platform.OS === 'ios') return RNFetchBlob.previewDocument('file://' + path, scheme);else return Promise.reject('RNFetchBlob.openDocument only supports IOS.');\n}\nfunction openDocument(path, scheme) {\n  if (Platform.OS === 'ios') return RNFetchBlob.openDocument('file://' + path, scheme);else return Promise.reject('RNFetchBlob.previewDocument only supports IOS.');\n}\nfunction excludeFromBackupKey(url) {\n  return RNFetchBlob.excludeFromBackupKey('file://' + path);\n}\nexport default {\n  openDocument: openDocument,\n  previewDocument: previewDocument,\n  excludeFromBackupKey: excludeFromBackupKey\n};","map":{"version":3,"names":["NativeAppEventEmitter","RNFetchBlob","NativeModules","previewDocument","path","scheme","Platform","OS","Promise","reject","openDocument","excludeFromBackupKey","url"],"sources":["/Users/sgreene/src/cs1/node_modules/react-native-fetch-blob/ios.js"],"sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport {\n  NativeModules,\n  DeviceEventEmitter,\n  Platform,\n  NativeAppEventEmitter,\n} from 'react-native'\n\nconst RNFetchBlob:RNFetchBlobNative = NativeModules.RNFetchBlob\n\n/**\n * Open a file using UIDocumentInteractionController\n * @param  {string]} path Path of the file to be open.\n * @param  {string} scheme URI scheme that needs to support, optional\n * @return {Promise}\n */\nfunction previewDocument(path:string, scheme:string) {\n  if(Platform.OS === 'ios')\n    return RNFetchBlob.previewDocument('file://' + path, scheme)\n  else\n    return Promise.reject('RNFetchBlob.openDocument only supports IOS.')\n}\n\n/**\n * Preview a file using UIDocumentInteractionController\n * @param  {string]} path Path of the file to be open.\n * @param  {string} scheme URI scheme that needs to support, optional\n * @return {Promise}\n */\nfunction openDocument(path:string, scheme:string) {\n  if(Platform.OS === 'ios')\n    return RNFetchBlob.openDocument('file://' + path, scheme)\n  else\n    return Promise.reject('RNFetchBlob.previewDocument only supports IOS.')\n}\n\n/**\n * Set excludeFromBackupKey to a URL to prevent the resource to be backuped to\n * iCloud.\n * @param  {string} url URL of the resource, only file URL is supported\n * @return {Promise}\n */\nfunction excludeFromBackupKey(url:string) {\n  return RNFetchBlob.excludeFromBackupKey('file://' + path);\n}\n\nexport default {\n  openDocument,\n  previewDocument,\n  excludeFromBackupKey\n}\n"],"mappings":";;;SAQEA,qBAAqB;AAGvB,IAAMC,WAA6B,GAAGC,aAAa,CAACD,WAAW;AAQ/D,SAASE,eAAeA,CAACC,IAAW,EAAEC,MAAa,EAAE;EACnD,IAAGC,QAAQ,CAACC,EAAE,KAAK,KAAK,EACtB,OAAON,WAAW,CAACE,eAAe,CAAC,SAAS,GAAGC,IAAI,EAAEC,MAAM,CAAC,MAE5D,OAAOG,OAAO,CAACC,MAAM,CAAC,6CAA6C,CAAC;AACxE;AAQA,SAASC,YAAYA,CAACN,IAAW,EAAEC,MAAa,EAAE;EAChD,IAAGC,QAAQ,CAACC,EAAE,KAAK,KAAK,EACtB,OAAON,WAAW,CAACS,YAAY,CAAC,SAAS,GAAGN,IAAI,EAAEC,MAAM,CAAC,MAEzD,OAAOG,OAAO,CAACC,MAAM,CAAC,gDAAgD,CAAC;AAC3E;AAQA,SAASE,oBAAoBA,CAACC,GAAU,EAAE;EACxC,OAAOX,WAAW,CAACU,oBAAoB,CAAC,SAAS,GAAGP,IAAI,CAAC;AAC3D;AAEA,eAAe;EACbM,YAAY,EAAZA,YAAY;EACZP,eAAe,EAAfA,eAAe;EACfQ,oBAAoB,EAApBA;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}