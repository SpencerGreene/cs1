{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { LOG } from \"../logConfig\";\nexport var BlobToSaveImage = function BlobToSaveImage(blob, contentType) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.onerror = reject;\n    reader.onload = function () {\n      var imageData = reader.result.split(',')[1];\n      resolve({\n        imageData: imageData,\n        contentType: contentType\n      });\n    };\n    reader.readAsDataURL(blob);\n  });\n};\nexport var savedImageToBlob = function () {\n  var _ref = _asyncToGenerator(function* (saveImage) {\n    LOG('os is', Platform.OS);\n    if (Platform.OS === 'android') {\n      return null;\n    } else {\n      try {\n        var response = yield fetch(`data:image/jpeg;base64,${saveImage.imageData}`);\n        var blob = yield response.blob();\n        return blob;\n      } catch (error) {\n        console.error('Error converting base64 to blob:', error);\n        throw error;\n      }\n    }\n  });\n  return function savedImageToBlob(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["AsyncStorage","LOG","BlobToSaveImage","blob","contentType","Promise","resolve","reject","reader","FileReader","onerror","onload","imageData","result","split","readAsDataURL","savedImageToBlob","_ref","_asyncToGenerator","saveImage","Platform","OS","response","fetch","error","console","_x","apply","arguments"],"sources":["/Users/sgreene/src/cs1/helpers/imageHelpers.js"],"sourcesContent":["import { Platform } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { LOG } from '../logConfig';\n\n// Helper function to convert blob to base64 in React Native\nexport const BlobToSaveImage = (blob, contentType) => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onerror = reject;\n        reader.onload = () => {\n            const imageData = reader.result.split(',')[1];\n            resolve({ imageData, contentType });\n        };\n        reader.readAsDataURL(blob);\n    });\n};\n\nexport const savedImageToBlob = async (saveImage) => {\n    LOG('os is', Platform.OS);\n    if (Platform.OS === 'android') {\n        return null;\n    } else {\n        try {\n            const response = await fetch(`data:image/jpeg;base64,${saveImage.imageData}`);\n            const blob = await response.blob();\n            return blob;\n        } catch (error) {\n            console.error('Error converting base64 to blob:', error);\n            throw error;\n        }\n    }\n};\n\n/*\n// Function to save data to storage\nexport const saveData = async (key, data) => {\n    try {\n        if (Platform.OS === 'web') {\n            // Handle image blob for web\n            if (data instanceof Blob) {\n                const blobUrl = URL.createObjectURL(data);\n                localStorage.setItem(key, blobUrl);\n            } else {\n                localStorage.setItem(key, JSON.stringify(data));\n            }\n        } else {\n            // Handle image blob for React Native\n            if (data instanceof Blob) {\n                // Convert blob to base64 string\n                const base64String = await BlobToBase64(data);\n                await AsyncStorage.setItem(key, base64String);\n            } else {\n                await AsyncStorage.setItem(key, JSON.stringify(data));\n            }\n        }\n    } catch (error) {\n        console.error('Error saving data:', error);\n    }\n};\n\n// Function to retrieve data from storage\nexport const getData = async (key) => {\n    try {\n        if (Platform.OS === 'web') {\n            const storedData = localStorage.getItem(key);\n            // Check if it's a blob URL\n            if (storedData && storedData.startsWith('blob:')) {\n                return storedData;\n            } else {\n                return storedData ? JSON.parse(storedData) : null;\n            }\n        } else {\n            const storedData = await AsyncStorage.getItem(key);\n            return storedData ? JSON.parse(storedData) : null;\n        }\n    } catch (error) {\n        console.error('Error retrieving data:', error);\n        return null;\n    }\n};\n\n\n\n// Function to delete data from storage\nexport const deleteData = async (key) => {\n    try {\n        if (Platform.OS === 'web') {\n            // Handle cleanup for web (remove blob URL)\n            const storedData = localStorage.getItem(key);\n            if (storedData && storedData.startsWith('blob:')) {\n                URL.revokeObjectURL(storedData);\n            }\n            localStorage.removeItem(key);\n        } else {\n            // Handle cleanup for React Native\n            await AsyncStorage.removeItem(key);\n        }\n    } catch (error) {\n        console.error('Error deleting data:', error);\n    }\n};\n\n*/"],"mappings":";;AACA,OAAOA,YAAY,MAAM,2CAA2C;AACpE,SAASC,GAAG;AAGZ,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,IAAI,EAAEC,WAAW,EAAK;EAClD,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;IACpC,IAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,OAAO,GAAGH,MAAM;IACvBC,MAAM,CAACG,MAAM,GAAG,YAAM;MAClB,IAAMC,SAAS,GAAGJ,MAAM,CAACK,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC7CR,OAAO,CAAC;QAAEM,SAAS,EAATA,SAAS;QAAER,WAAW,EAAXA;MAAY,CAAC,CAAC;IACvC,CAAC;IACDI,MAAM,CAACO,aAAa,CAACZ,IAAI,CAAC;EAC9B,CAAC,CAAC;AACN,CAAC;AAED,OAAO,IAAMa,gBAAgB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,SAAS,EAAK;IACjDlB,GAAG,CAAC,OAAO,EAAEmB,QAAQ,CAACC,EAAE,CAAC;IACzB,IAAID,QAAQ,CAACC,EAAE,KAAK,SAAS,EAAE;MAC3B,OAAO,IAAI;IACf,CAAC,MAAM;MACH,IAAI;QACA,IAAMC,QAAQ,SAASC,KAAK,CAAE,0BAAyBJ,SAAS,CAACP,SAAU,EAAC,CAAC;QAC7E,IAAMT,IAAI,SAASmB,QAAQ,CAACnB,IAAI,CAAC,CAAC;QAClC,OAAOA,IAAI;MACf,CAAC,CAAC,OAAOqB,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QACxD,MAAMA,KAAK;MACf;IACJ;EACJ,CAAC;EAAA,gBAdYR,gBAAgBA,CAAAU,EAAA;IAAA,OAAAT,IAAA,CAAAU,KAAA,OAAAC,SAAA;EAAA;AAAA,GAc5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}