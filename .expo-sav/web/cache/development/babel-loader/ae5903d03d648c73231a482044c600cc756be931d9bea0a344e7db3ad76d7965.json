{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport RNFetchBlob from \"../index.js\";\nimport Log from \"../utils/log.js\";\nimport fs from \"../fs\";\nimport unicode from \"../utils/unicode\";\nimport Blob from \"./Blob\";\nvar log = new Log('FetchPolyfill');\nlog.disable();\nvar Fetch = _createClass(function Fetch(config) {\n  _classCallCheck(this, Fetch);\n  Object.assign(this, new RNFetchBlobFetchPolyfill(config));\n});\nexport { Fetch as default };\nvar RNFetchBlobFetchPolyfill = _createClass(function RNFetchBlobFetchPolyfill(config) {\n  _classCallCheck(this, RNFetchBlobFetchPolyfill);\n  this.build = function () {\n    return function (url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var body = options.body;\n      var promise = Promise.resolve();\n      var blobCache = null;\n      options.headers = options.headers || {};\n      var ctype = options['Content-Type'] || options['content-type'];\n      var ctypeH = options.headers['Content-Type'] || options.headers['content-type'];\n      options.headers['Content-Type'] = ctype || ctypeH;\n      options.headers['content-type'] = ctype || ctypeH;\n      options.method = options.method || 'GET';\n      if (body) {\n        if (body instanceof FormData) {\n          log.verbose('convert FormData to blob body');\n          promise = Blob.build(body).then(function (b) {\n            blobCache = b;\n            options.headers['Content-Type'] = 'multipart/form-data;boundary=' + b.multipartBoundary;\n            return Promise.resolve(RNFetchBlob.wrap(b._ref));\n          });\n        } else if (body.isRNFetchBlobPolyfill) promise = Promise.resolve(RNFetchBlob.wrap(body.blobPath));else if (typeof body !== 'object' && options.headers['Content-Type'] !== 'application/json') promise = Promise.resolve(JSON.stringify(body));else if (typeof body !== 'string') promise = Promise.resolve(body.toString());else promise = Promise.resolve(body);\n      }\n      var progressHandler, uploadHandler, cancelHandler;\n      var statefulPromise = promise.then(function (body) {\n        var task = RNFetchBlob.config(config).fetch(options.method, url, options.headers, body);\n        if (progressHandler) task.progress(progressHandler);\n        if (uploadHandler) task.uploadProgress(uploadHandler);\n        if (cancelHandler) task.cancel();\n        return task.then(function (resp) {\n          log.verbose('response', resp);\n          if (blobCache !== null && blobCache instanceof Blob) blobCache.close();\n          return Promise.resolve(new RNFetchBlobFetchRepsonse(resp));\n        });\n      });\n      statefulPromise.progress = function (fn) {\n        progressHandler = fn;\n      };\n      statefulPromise.uploadProgress = function (fn) {\n        uploadHandler = fn;\n      };\n      statefulPromise.cancel = function () {\n        cancelHandler = true;\n        if (task.cancel) task.cancel();\n      };\n      return statefulPromise;\n    };\n  };\n});\nvar RNFetchBlobFetchRepsonse = function () {\n  function RNFetchBlobFetchRepsonse(resp) {\n    _classCallCheck(this, RNFetchBlobFetchRepsonse);\n    var info = resp.info();\n    this.headers = info.headers;\n    this.ok = info.status >= 200 && info.status <= 299, this.status = info.status;\n    this.type = 'basic';\n    this.bodyUsed = false;\n    this.resp = resp;\n    this.rnfbRespInfo = info;\n    this.rnfbResp = resp;\n  }\n  _createClass(RNFetchBlobFetchRepsonse, [{\n    key: \"rawResp\",\n    value: function rawResp() {\n      return Promise.resolve(this.rnfbResp);\n    }\n  }, {\n    key: \"arrayBuffer\",\n    value: function arrayBuffer() {\n      log.verbose('to arrayBuffer', this.rnfbRespInfo);\n      this.bodyUsed = true;\n      return readArrayBuffer(this.rnfbResp, this.rnfbRespInfo);\n    }\n  }, {\n    key: \"text\",\n    value: function text() {\n      log.verbose('to text', this.rnfbResp, this.rnfbRespInfo);\n      this.bodyUsed = true;\n      return readText(this.rnfbResp, this.rnfbRespInfo);\n    }\n  }, {\n    key: \"json\",\n    value: function json() {\n      log.verbose('to json', this.rnfbResp, this.rnfbRespInfo);\n      this.bodyUsed = true;\n      return readJSON(this.rnfbResp, this.rnfbRespInfo);\n    }\n  }, {\n    key: \"blob\",\n    value: function blob() {\n      log.verbose('to blob', this.rnfbResp, this.rnfbRespInfo);\n      this.bodyUsed = true;\n      return readBlob(this.rnfbResp, this.rnfbRespInfo);\n    }\n  }]);\n  return RNFetchBlobFetchRepsonse;\n}();\nfunction readArrayBuffer(resp, info) {\n  switch (info.rnfbEncode) {\n    case 'path':\n      return resp.readFile('ascii');\n      break;\n    default:\n      var buffer = [];\n      var str = resp.text();\n      for (var i in str) {\n        buffer[i] = str.charCodeAt(i);\n      }\n      return Promise.resolve(buffer);\n      break;\n  }\n}\nfunction readText(resp, info) {\n  switch (info.rnfbEncode) {\n    case 'base64':\n      return Promise.resolve(resp.text());\n      break;\n    case 'path':\n      return resp.text();\n      break;\n    default:\n      return Promise.resolve(resp.text());\n      break;\n  }\n}\nfunction readBlob(resp, info) {\n  log.verbose('readBlob', resp, info);\n  return resp.blob();\n}\nfunction readJSON(resp, info) {\n  log.verbose('readJSON', resp, info);\n  switch (info.rnfbEncode) {\n    case 'base64':\n      return Promise.resolve(resp.json());\n    case 'path':\n      return resp.json();\n    default:\n      return Promise.resolve(resp.json());\n  }\n}","map":{"version":3,"names":["RNFetchBlob","Log","fs","unicode","Blob","log","disable","Fetch","_createClass","config","_classCallCheck","Object","assign","RNFetchBlobFetchPolyfill","default","build","url","options","arguments","length","undefined","body","promise","Promise","resolve","blobCache","headers","ctype","ctypeH","method","FormData","verbose","then","b","multipartBoundary","wrap","_ref","isRNFetchBlobPolyfill","blobPath","JSON","stringify","toString","progressHandler","uploadHandler","cancelHandler","statefulPromise","task","fetch","progress","uploadProgress","cancel","resp","close","RNFetchBlobFetchRepsonse","fn","info","ok","status","type","bodyUsed","rnfbRespInfo","rnfbResp","key","value","rawResp","arrayBuffer","readArrayBuffer","text","readText","json","readJSON","blob","readBlob","rnfbEncode","readFile","buffer","str","i","charCodeAt"],"sources":["/Users/sgreene/src/cs1/node_modules/react-native-fetch-blob/polyfill/Fetch.js"],"sourcesContent":["import RNFetchBlob from '../index.js'\nimport Log from '../utils/log.js'\nimport fs from '../fs'\nimport unicode from '../utils/unicode'\nimport Blob from './Blob'\n\nconst log = new Log('FetchPolyfill')\n\nlog.disable()\n// log.level(3)\n\nexport default class Fetch {\n\n  constructor(config:RNFetchBlobConfig) {\n    Object.assign(this, new RNFetchBlobFetchPolyfill(config))\n  }\n\n}\n\nclass RNFetchBlobFetchPolyfill {\n\n  constructor(config:RNFetchBlobConfig) {\n    this.build = () => (url, options = {}) => {\n\n      let body = options.body\n      let promise = Promise.resolve()\n      let blobCache = null\n\n      options.headers = options.headers || {}\n      let ctype = options['Content-Type'] || options['content-type']\n      let ctypeH = options.headers['Content-Type'] || options.headers['content-type']\n      options.headers['Content-Type'] = ctype || ctypeH\n      options.headers['content-type'] = ctype || ctypeH\n      options.method = options.method || 'GET'\n      if(body) {\n        // When the request body is an instance of FormData, create a Blob cache\n        // to upload the body.\n        if(body instanceof FormData) {\n          log.verbose('convert FormData to blob body')\n          promise = Blob.build(body).then((b) => {\n            blobCache = b\n            options.headers['Content-Type'] = 'multipart/form-data;boundary=' + b.multipartBoundary\n            return Promise.resolve(RNFetchBlob.wrap(b._ref))\n          })\n        }\n        // When request body is a Blob, use file URI of the Blob as request body.\n        else if (body.isRNFetchBlobPolyfill)\n          promise = Promise.resolve(RNFetchBlob.wrap(body.blobPath))\n        else if (typeof body !== 'object' && options.headers['Content-Type'] !== 'application/json')\n          promise = Promise.resolve(JSON.stringify(body))\n        else if (typeof body !== 'string')\n          promise = Promise.resolve(body.toString())\n        // send it as-is, leave the native module decide how to send the body.\n        else\n          promise = Promise.resolve(body)\n      }\n      // task is a progress reportable and cancellable Promise, however,\n      // task.then is not, so we have to extend task.then with progress and\n      // cancel function\n      let progressHandler, uploadHandler, cancelHandler\n      let statefulPromise = promise\n          .then((body) => {\n            let task = RNFetchBlob.config(config)\n              .fetch(options.method, url, options.headers, body)\n            if(progressHandler)\n              task.progress(progressHandler)\n            if(uploadHandler)\n              task.uploadProgress(uploadHandler)\n            if(cancelHandler)\n              task.cancel()\n            return task.then((resp) => {\n              log.verbose('response', resp)\n              // release blob cache created when sending request\n              if(blobCache !== null && blobCache instanceof Blob)\n                blobCache.close()\n              return Promise.resolve(new RNFetchBlobFetchRepsonse(resp))\n            })\n          })\n\n      // extend task.then progress with report and cancelling functions\n      statefulPromise.progress = (fn) => {\n        progressHandler = fn\n      }\n      statefulPromise.uploadProgress = (fn) => {\n        uploadHandler = fn\n      }\n      statefulPromise.cancel = () => {\n        cancelHandler = true\n        if(task.cancel)\n          task.cancel()\n      }\n\n      return statefulPromise\n\n    }\n  }\n\n}\n\nclass RNFetchBlobFetchRepsonse {\n\n  constructor(resp:FetchBlobResponse) {\n    let info = resp.info()\n    this.headers = info.headers\n    this.ok = info.status >= 200 && info.status <= 299,\n    this.status = info.status\n    this.type = 'basic'\n    this.bodyUsed = false\n    this.resp = resp\n    this.rnfbRespInfo = info\n    this.rnfbResp = resp\n  }\n\n  rawResp() {\n    return Promise.resolve(this.rnfbResp)\n  }\n\n  arrayBuffer(){\n    log.verbose('to arrayBuffer', this.rnfbRespInfo)\n    this.bodyUsed = true\n    return readArrayBuffer(this.rnfbResp, this.rnfbRespInfo)\n  }\n\n  text() {\n    log.verbose('to text', this.rnfbResp, this.rnfbRespInfo)\n    this.bodyUsed = true\n    return readText(this.rnfbResp, this.rnfbRespInfo)\n  }\n\n  json() {\n    log.verbose('to json', this.rnfbResp, this.rnfbRespInfo)\n    this.bodyUsed = true\n    return readJSON(this.rnfbResp, this.rnfbRespInfo)\n  }\n\n  blob() {\n    log.verbose('to blob', this.rnfbResp, this.rnfbRespInfo)\n    this.bodyUsed = true\n    return readBlob(this.rnfbResp, this.rnfbRespInfo)\n  }\n}\n\n/**\n * Get response data as array.\n * @param  {FetchBlobResponse} resp Response data object from RNFB fetch call.\n * @param  {RNFetchBlobResponseInfo} info Response informations.\n * @return {Promise<Array>}\n */\nfunction readArrayBuffer(resp, info):Promise<Array> {\n  switch (info.rnfbEncode) {\n    case 'path':\n      return resp.readFile('ascii')\n      break\n    default:\n      let buffer = []\n      let str = resp.text()\n      for (let i in str) {\n        buffer[i] = str.charCodeAt(i);\n      }\n      return Promise.resolve(buffer)\n      break\n  }\n}\n\n/**\n * Get response data as string.\n * @param  {FetchBlobResponse} resp Response data object from RNFB fetch call.\n * @param  {RNFetchBlobResponseInfo} info Response informations.\n * @return {Promise<string>}\n */\nfunction readText(resp, info):Promise<string> {\n  switch (info.rnfbEncode) {\n    case 'base64':\n      return Promise.resolve(resp.text())\n      break\n    case 'path':\n      return resp.text()\n      break\n    default:\n      return Promise.resolve(resp.text())\n      break\n  }\n}\n\n\n/**\n * Get response data as RNFetchBlob Blob polyfill object.\n * @param  {FetchBlobResponse} resp Response data object from RNFB fetch call.\n * @param  {RNFetchBlobResponseInfo} info Response informations.\n * @return {Promise<Blob>}\n */\nfunction readBlob(resp, info):Promise<Blob> {\n  log.verbose('readBlob', resp, info)\n  return resp.blob()\n}\n\n/**\n * Get response data as JSON object.\n * @param  {FetchBlobResponse} resp Response data object from RNFB fetch call.\n * @param  {RNFetchBlobResponseInfo} info Response informations.\n * @return {Promise<object>}\n */\nfunction readJSON(resp, info):Promise<object> {\n  log.verbose('readJSON', resp, info)\n  switch (info.rnfbEncode) {\n    case 'base64':\n      return Promise.resolve(resp.json())\n    case 'path':\n      return resp.json()\n    default:\n      return Promise.resolve(resp.json())\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}