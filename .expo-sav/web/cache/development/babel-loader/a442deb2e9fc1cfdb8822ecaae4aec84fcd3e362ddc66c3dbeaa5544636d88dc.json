{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport axios from 'axios';\nimport { DATA_URL, WORKFLOW_URL } from \"../config.js\";\nimport { LOG, ERROR } from \"../logConfig.js\";\nimport { BlobToSaveImage } from \"../helpers/imageHelpers.js\";\nvar BubbleApi = function () {\n  function BubbleApi() {\n    _classCallCheck(this, BubbleApi);\n  }\n  _createClass(BubbleApi, null, [{\n    key: \"setApiToken\",\n    value: function setApiToken(token) {\n      this.apiToken = token;\n      this.header = {\n        headers: {\n          Authorization: `Bearer ${this.apiToken}`\n        }\n      };\n    }\n  }, {\n    key: \"apiLogin\",\n    value: function () {\n      var _apiLogin = _asyncToGenerator(function* (email, password) {\n        try {\n          var _data$response, _data$response2, _data$response3;\n          var _yield$axios$post = yield axios.post(`${this.workflowUrl}/login`, {\n              email: email,\n              password: password\n            }),\n            data = _yield$axios$post.data;\n          var userInfo = {\n            userID: data == null ? void 0 : (_data$response = data.response) == null ? void 0 : _data$response.user_id,\n            token: data == null ? void 0 : (_data$response2 = data.response) == null ? void 0 : _data$response2.token,\n            expireTime: new Date().getTime() + (data == null ? void 0 : (_data$response3 = data.response) == null ? void 0 : _data$response3.expires) * 1000\n          };\n          LOG('received token expires: ', Date(userInfo.expireTime).toLocaleString());\n          return userInfo;\n        } catch (err) {\n          ERROR(`apiLogin fail ${email}`);\n        }\n      });\n      function apiLogin(_x, _x2) {\n        return _apiLogin.apply(this, arguments);\n      }\n      return apiLogin;\n    }()\n  }, {\n    key: \"apiLogout\",\n    value: function () {\n      var _apiLogout = _asyncToGenerator(function* () {\n        try {\n          var _yield$axios$post2 = yield axios.post(`${this.workflowUrl}/logout`, {}, {\n              headers: {\n                Authorization: `Bearer ${this.apiToken}`\n              }\n            }),\n            data = _yield$axios$post2.data;\n          return data.response;\n        } catch (err) {\n          ERROR(`apiLogout fail`);\n        }\n      });\n      function apiLogout() {\n        return _apiLogout.apply(this, arguments);\n      }\n      return apiLogout;\n    }()\n  }, {\n    key: \"apiGetUser\",\n    value: function () {\n      var _apiGetUser = _asyncToGenerator(function* (userID) {\n        var rawUser = yield this._fetchData('user', userID);\n        var user = {\n          firstName: rawUser.first_text,\n          lastName: rawUser.last_text,\n          name: rawUser.first_last_text,\n          teamNumT: rawUser.teamnumt_text,\n          fetchedDate: new Date(),\n          profilePictureUrl: 'http:' + rawUser.picture_image\n        };\n        if (rawUser.picture_image) {\n          var _yield$this$_fetchIma = yield this._fetchImage(rawUser.picture_image),\n            blob = _yield$this$_fetchIma.blob,\n            contentType = _yield$this$_fetchIma.contentType;\n          user.profileBlob = blob;\n          user.profileSaveImage = yield BlobToSaveImage(blob, contentType);\n        }\n        return user;\n      });\n      function apiGetUser(_x3) {\n        return _apiGetUser.apply(this, arguments);\n      }\n      return apiGetUser;\n    }()\n  }, {\n    key: \"apiGetAppVariables\",\n    value: function () {\n      var _apiGetAppVariables = _asyncToGenerator(function* () {\n        var rawAppVariables = yield this._fetchWorkflow('appVariables');\n        var appVariables = {\n          defaultColorIDs: {\n            active: rawAppVariables.appVariables.default_coloractive_custom_colors,\n            flash: rawAppVariables.appVariables.default_colorflash_custom_colors,\n            inactive: rawAppVariables.appVariables.default_colorinactive_custom_colors,\n            selected: rawAppVariables.appVariables.default_colorselected_custom_colors\n          },\n          gameID: rawAppVariables.appVariables.default_game_custom_game,\n          eventKey: rawAppVariables.appVariables.default_event_text,\n          defaultMatchType: rawAppVariables.appVariables.default_match_type_option_matchtype,\n          defaultMatchNum: rawAppVariables.appVariables.default_match_number_number,\n          teamNumT: rawAppVariables.appVariables.analyzeteamnumt_text\n        };\n        var blobDict = {};\n        appVariables.game = yield this._fetchGame(appVariables.gameID);\n        appVariables.blobDict = blobDict;\n        appVariables.fetchedDate = new Date();\n        return appVariables;\n      });\n      function apiGetAppVariables() {\n        return _apiGetAppVariables.apply(this, arguments);\n      }\n      return apiGetAppVariables;\n    }()\n  }, {\n    key: \"apiGetLastChanged\",\n    value: function () {\n      var _apiGetLastChanged = _asyncToGenerator(function* () {\n        var rawLastChanged = yield this._fetchWorkflow('lastChanged');\n        return rawLastChanged;\n      });\n      function apiGetLastChanged() {\n        return _apiGetLastChanged.apply(this, arguments);\n      }\n      return apiGetLastChanged;\n    }()\n  }, {\n    key: \"apiGetColorDict\",\n    value: function () {\n      var _apiGetColorDict = _asyncToGenerator(function* (teamNumT) {\n        var rawColors = yield this._searchData('colors', [{\n          key: \"deleted\",\n          constraint_type: \"not equal\",\n          value: \"yes\"\n        }]);\n        var rawColorArray = rawColors.results;\n        var colorDict = {};\n        rawColorArray.forEach(function (rawColor) {\n          var analyzeTeamNumT = rawColor.analyzeteamnumt_text;\n          if (!analyzeTeamNumT || analyzeTeamNumT === undefined || analyzeTeamNumT === teamNumT) colorDict[rawColor._id] = {\n            hexColor: rawColor.hexcolor_text,\n            contrastColor: rawColor.contrastcolor_option_textcolor,\n            name: rawColor.name_text,\n            analyzeTeamNumT: analyzeTeamNumT\n          };\n        });\n        colorDict.fetchedDate = new Date();\n        colorDict.teamNumT = teamNumT;\n        this.colorDict = colorDict;\n        return colorDict;\n      });\n      function apiGetColorDict(_x4) {\n        return _apiGetColorDict.apply(this, arguments);\n      }\n      return apiGetColorDict;\n    }()\n  }, {\n    key: \"apiSetDefaultMatchNumber\",\n    value: function () {\n      var _apiSetDefaultMatchNumber = _asyncToGenerator(function* (matchNumber) {\n        try {\n          var _yield$axios$post3 = yield axios.post(`${this.workflowUrl}/setDefaultMatchNum`, {\n              matchNumber: matchNumber\n            }, {\n              headers: {\n                Authorization: `Bearer ${this.apiToken}`\n              }\n            }),\n            data = _yield$axios$post3.data;\n          return data.response;\n        } catch (err) {\n          ERROR(`setDefaultMatchNum fail`);\n        }\n      });\n      function apiSetDefaultMatchNumber(_x5) {\n        return _apiSetDefaultMatchNumber.apply(this, arguments);\n      }\n      return apiSetDefaultMatchNumber;\n    }()\n  }, {\n    key: \"printToken\",\n    value: function printToken() {\n      LOG('my token is', this.apiToken);\n    }\n  }, {\n    key: \"_fetchData\",\n    value: function () {\n      var _fetchData2 = _asyncToGenerator(function* (thingType, thingID) {\n        try {\n          var _yield$axios$get = yield axios.get(`${this.dataUrl}/${thingType}/${thingID}`, {}, this.header),\n            data = _yield$axios$get.data;\n          return data.response;\n        } catch (err) {\n          ERROR(`_fetchData fail ${thingType} ${thingID}`);\n        }\n      });\n      function _fetchData(_x6, _x7) {\n        return _fetchData2.apply(this, arguments);\n      }\n      return _fetchData;\n    }()\n  }, {\n    key: \"_searchData\",\n    value: function () {\n      var _searchData2 = _asyncToGenerator(function* (thingType, constraints) {\n        try {\n          var _yield$axios$get2 = yield axios.get(`${this.dataUrl}/${thingType}?constraints=${JSON.stringify(constraints)}`, {}, this.header),\n            data = _yield$axios$get2.data;\n          return data.response;\n        } catch (err) {\n          ERROR(`_searchData fail ${thingType} ${constraints}`);\n        }\n      });\n      function _searchData(_x8, _x9) {\n        return _searchData2.apply(this, arguments);\n      }\n      return _searchData;\n    }()\n  }, {\n    key: \"_fetchWorkflow\",\n    value: function () {\n      var _fetchWorkflow2 = _asyncToGenerator(function* (endpoint) {\n        try {\n          var _yield$axios$get3 = yield axios.get(`${this.workflowUrl}/${endpoint}`, this.header),\n            data = _yield$axios$get3.data;\n          return data.response;\n        } catch (err) {\n          ERROR(`_fetchWorkflow fail ${endpoint}`);\n        }\n      });\n      function _fetchWorkflow(_x10) {\n        return _fetchWorkflow2.apply(this, arguments);\n      }\n      return _fetchWorkflow;\n    }()\n  }, {\n    key: \"_fetchGame\",\n    value: function () {\n      var _fetchGame2 = _asyncToGenerator(function* (gameID, blobDict) {\n        var _this = this;\n        var rawGame = yield this._fetchData('game', gameID);\n        var game = {\n          season: rawGame.season_text,\n          autoTeleSeconds: rawGame.autoteleseconds_number,\n          name: rawGame.name_text,\n          id: gameID\n        };\n        var counterIDs = rawGame.counters_list_custom_counter;\n        game.counterDefs = yield Promise.all(counterIDs.map(function (id) {\n          return _this._fetchCounterDefinition(id, blobDict);\n        }));\n        game.fetchedDate = new Date();\n        return game;\n      });\n      function _fetchGame(_x11, _x12) {\n        return _fetchGame2.apply(this, arguments);\n      }\n      return _fetchGame;\n    }()\n  }, {\n    key: \"_fetchCounterDefinition\",\n    value: function () {\n      var _fetchCounterDefinition2 = _asyncToGenerator(function* (counterID, blobDict) {\n        var _this2 = this;\n        var rawCounter = yield this._fetchData('counterdefinition', counterID);\n        var counterDef = {\n          name: rawCounter.name_text,\n          scoutDisplayName: rawCounter.scoutdisplayname__boolean,\n          gamePhases: rawCounter.gamephases_list_option_gamephase,\n          sortOrder: rawCounter.sequence_number,\n          id: counterID\n        };\n        var conditionIDs = rawCounter.conditions_list_custom_gamechoice;\n        counterDef.conditions = yield Promise.all(conditionIDs.map(function (id) {\n          return _this2._fetchCounterCondition(id, blobDict);\n        }));\n        return counterDef;\n      });\n      function _fetchCounterDefinition(_x13, _x14) {\n        return _fetchCounterDefinition2.apply(this, arguments);\n      }\n      return _fetchCounterDefinition;\n    }()\n  }, {\n    key: \"_fetchCounterCondition\",\n    value: function () {\n      var _fetchCounterCondition2 = _asyncToGenerator(function* (counterConditionID, blobDict) {\n        var _this3 = this;\n        var rawCondition = yield this._fetchData('countercondition', counterConditionID);\n        var counterCondition = {\n          sortOrder: rawCondition.typesortorder_number,\n          name: rawCondition.display_text,\n          type: rawCondition.type_option_condition_type,\n          id: counterConditionID\n        };\n        var optionIDs = rawCondition.choices_list_custom_counterconditionoption;\n        counterCondition.options = yield Promise.all(optionIDs.map(function (id) {\n          return _this3._fetchCounterConditionOption(id, blobDict);\n        }));\n        return counterCondition;\n      });\n      function _fetchCounterCondition(_x15, _x16) {\n        return _fetchCounterCondition2.apply(this, arguments);\n      }\n      return _fetchCounterCondition;\n    }()\n  }, {\n    key: \"_fetchCounterConditionOption\",\n    value: function () {\n      var _fetchCounterConditionOption2 = _asyncToGenerator(function* (optionID, blobDict) {\n        var rawOption = yield this._fetchData('counterconditionoption', optionID);\n        var option = {\n          colorIDs: {\n            active: rawOption.coloractive_custom_colors,\n            flash: rawOption.colorflash_custom_colors,\n            inactive: rawOption.colorinactive_custom_colors,\n            selected: rawOption.colorselected_custom_colors\n          },\n          name: rawOption.name_text,\n          height: rawOption.height_option_buttonheight,\n          imagePointer: rawOption.image_image,\n          sortOrder: rawOption.sortorder_number,\n          id: optionID\n        };\n        if (option.imagePointer) {\n          var _yield$this$_fetchIma2 = yield this._fetchImage(option.imagePointer),\n            blob = _yield$this$_fetchIma2.blob,\n            contentType = _yield$this$_fetchIma2.contentType;\n          option.imageBlob = blob;\n          option.saveImage = yield BlobToSaveImage(blob, contentType);\n          blobDict[optionID] = blob;\n        }\n        return option;\n      });\n      function _fetchCounterConditionOption(_x17, _x18) {\n        return _fetchCounterConditionOption2.apply(this, arguments);\n      }\n      return _fetchCounterConditionOption;\n    }()\n  }, {\n    key: \"_fetchImage\",\n    value: function () {\n      var _fetchImage2 = _asyncToGenerator(function* (imagePointer) {\n        try {\n          var response = yield fetch('https:' + imagePointer, {\n            cache: 'no-cache'\n          });\n          var contentType = response.headers.get('content-type');\n          var blob = yield response.blob();\n          return {\n            blob: blob,\n            contentType: contentType\n          };\n        } catch (error) {\n          ERROR('Error fetching and storing image:', error);\n        }\n        ;\n      });\n      function _fetchImage(_x19) {\n        return _fetchImage2.apply(this, arguments);\n      }\n      return _fetchImage;\n    }()\n  }]);\n  return BubbleApi;\n}();\nBubbleApi.apiToken = '';\nBubbleApi.header = '';\nBubbleApi.dataUrl = DATA_URL;\nBubbleApi.workflowUrl = WORKFLOW_URL;\nBubbleApi.colorDict = {};\nexport { BubbleApi as default };","map":{"version":3,"names":["axios","DATA_URL","WORKFLOW_URL","LOG","ERROR","BlobToSaveImage","BubbleApi","_classCallCheck","_createClass","key","value","setApiToken","token","apiToken","header","headers","Authorization","_apiLogin","_asyncToGenerator","email","password","_data$response","_data$response2","_data$response3","_yield$axios$post","post","workflowUrl","data","userInfo","userID","response","user_id","expireTime","Date","getTime","expires","toLocaleString","err","apiLogin","_x","_x2","apply","arguments","_apiLogout","_yield$axios$post2","apiLogout","_apiGetUser","rawUser","_fetchData","user","firstName","first_text","lastName","last_text","name","first_last_text","teamNumT","teamnumt_text","fetchedDate","profilePictureUrl","picture_image","_yield$this$_fetchIma","_fetchImage","blob","contentType","profileBlob","profileSaveImage","apiGetUser","_x3","_apiGetAppVariables","rawAppVariables","_fetchWorkflow","appVariables","defaultColorIDs","active","default_coloractive_custom_colors","flash","default_colorflash_custom_colors","inactive","default_colorinactive_custom_colors","selected","default_colorselected_custom_colors","gameID","default_game_custom_game","eventKey","default_event_text","defaultMatchType","default_match_type_option_matchtype","defaultMatchNum","default_match_number_number","analyzeteamnumt_text","blobDict","game","_fetchGame","apiGetAppVariables","_apiGetLastChanged","rawLastChanged","apiGetLastChanged","_apiGetColorDict","rawColors","_searchData","constraint_type","rawColorArray","results","colorDict","forEach","rawColor","analyzeTeamNumT","undefined","_id","hexColor","hexcolor_text","contrastColor","contrastcolor_option_textcolor","name_text","apiGetColorDict","_x4","_apiSetDefaultMatchNumber","matchNumber","_yield$axios$post3","apiSetDefaultMatchNumber","_x5","printToken","_fetchData2","thingType","thingID","_yield$axios$get","get","dataUrl","_x6","_x7","_searchData2","constraints","_yield$axios$get2","JSON","stringify","_x8","_x9","_fetchWorkflow2","endpoint","_yield$axios$get3","_x10","_fetchGame2","_this","rawGame","season","season_text","autoTeleSeconds","autoteleseconds_number","id","counterIDs","counters_list_custom_counter","counterDefs","Promise","all","map","_fetchCounterDefinition","_x11","_x12","_fetchCounterDefinition2","counterID","_this2","rawCounter","counterDef","scoutDisplayName","scoutdisplayname__boolean","gamePhases","gamephases_list_option_gamephase","sortOrder","sequence_number","conditionIDs","conditions_list_custom_gamechoice","conditions","_fetchCounterCondition","_x13","_x14","_fetchCounterCondition2","counterConditionID","_this3","rawCondition","counterCondition","typesortorder_number","display_text","type","type_option_condition_type","optionIDs","choices_list_custom_counterconditionoption","options","_fetchCounterConditionOption","_x15","_x16","_fetchCounterConditionOption2","optionID","rawOption","option","colorIDs","coloractive_custom_colors","colorflash_custom_colors","colorinactive_custom_colors","colorselected_custom_colors","height","height_option_buttonheight","imagePointer","image_image","sortorder_number","_yield$this$_fetchIma2","imageBlob","saveImage","_x17","_x18","_fetchImage2","fetch","cache","error","_x19","default"],"sources":["/Users/sgreene/src/cs1/api/BubbleApi.js"],"sourcesContent":["import axios from 'axios';\nimport { DATA_URL, WORKFLOW_URL } from '../config.js';\nimport { LOG, ERROR } from '../logConfig.js';\nimport { BlobToSaveImage } from '../helpers/imageHelpers.js';\n\nexport default class BubbleApi {\n    static apiToken = '';\n    static header = '';\n    static dataUrl = DATA_URL;\n    static workflowUrl = WORKFLOW_URL;\n    static colorDict = {};\n\n    static setApiToken(token) {\n        this.apiToken = token;\n        this.header = { headers: { Authorization: `Bearer ${this.apiToken}` } };\n    }\n\n    static async apiLogin(email, password) {\n        try {\n            const { data } = await axios.post(\n                `${this.workflowUrl}/login`,\n                { email, password }\n            );\n\n            const userInfo = {\n                userID: data?.response?.user_id,\n                token: data?.response?.token,\n                expireTime: new Date().getTime() + data?.response?.expires * 1000,\n            };\n\n            LOG('received token expires: ', Date(userInfo.expireTime).toLocaleString());\n\n            return userInfo;\n        } catch (err) {\n            ERROR(`apiLogin fail ${email}`);\n        }\n    }\n\n    static async apiLogout() {\n        try {\n            const { data } = await axios.post(\n                `${this.workflowUrl}/logout`,\n                {},\n                { headers: { Authorization: `Bearer ${this.apiToken}` } },\n            );\n            return data.response;\n        } catch (err) {\n            ERROR(`apiLogout fail`);\n        }\n    }\n\n    static async apiGetUser(userID) {\n        const rawUser = await this._fetchData('user', userID);\n        const user = {\n            firstName: rawUser.first_text,\n            lastName: rawUser.last_text,\n            name: rawUser.first_last_text,\n            teamNumT: rawUser.teamnumt_text,\n            fetchedDate: new Date(),\n            profilePictureUrl: 'http:' + rawUser.picture_image,\n        };\n\n        if (rawUser.picture_image) {\n            const { blob, contentType } = await this._fetchImage(rawUser.picture_image);\n            user.profileBlob = blob;\n            user.profileSaveImage = await BlobToSaveImage(blob, contentType);\n        }\n\n        return user;\n    }\n\n    static async apiGetAppVariables() {\n        let rawAppVariables = await this._fetchWorkflow('appVariables');\n        const appVariables = {\n            defaultColorIDs: {\n                active: rawAppVariables.appVariables.default_coloractive_custom_colors,\n                flash: rawAppVariables.appVariables.default_colorflash_custom_colors,\n                inactive: rawAppVariables.appVariables.default_colorinactive_custom_colors,\n                selected: rawAppVariables.appVariables.default_colorselected_custom_colors,\n            },\n            gameID: rawAppVariables.appVariables.default_game_custom_game,\n            eventKey: rawAppVariables.appVariables.default_event_text,\n            defaultMatchType: rawAppVariables.appVariables.default_match_type_option_matchtype,\n            defaultMatchNum: rawAppVariables.appVariables.default_match_number_number,\n            teamNumT: rawAppVariables.appVariables.analyzeteamnumt_text,\n        };\n\n        const blobDict = {};\n        appVariables.game = await this._fetchGame(appVariables.gameID);\n        appVariables.blobDict = blobDict;\n        appVariables.fetchedDate = new Date();\n\n        return appVariables;\n    }\n\n    static async apiGetLastChanged() {\n        const rawLastChanged = await this._fetchWorkflow('lastChanged');\n        return rawLastChanged;\n    }\n\n    static async apiGetColorDict(teamNumT) {\n        const rawColors = await this._searchData(\n            'colors',\n            [{\n                key: \"deleted\",\n                constraint_type: \"not equal\",\n                value: \"yes\"\n            }]\n        );\n        const rawColorArray = rawColors.results;\n\n        let colorDict = {};\n        rawColorArray.forEach((rawColor) => {\n            const analyzeTeamNumT = rawColor.analyzeteamnumt_text;\n            if (!analyzeTeamNumT || analyzeTeamNumT === undefined || analyzeTeamNumT === teamNumT)\n                colorDict[rawColor._id] = {\n                    hexColor: rawColor.hexcolor_text,\n                    contrastColor: rawColor.contrastcolor_option_textcolor,\n                    name: rawColor.name_text,\n                    analyzeTeamNumT\n                }\n        });\n        colorDict.fetchedDate = new Date();\n        colorDict.teamNumT = teamNumT;\n\n        this.colorDict = colorDict;\n        return colorDict;\n    }\n\n    static async apiSetDefaultMatchNumber(matchNumber) {\n        try {\n            const { data } = await axios.post(\n                `${this.workflowUrl}/setDefaultMatchNum`,\n                { matchNumber },\n                { headers: { Authorization: `Bearer ${this.apiToken}` } },\n            );\n\n            return data.response;\n        } catch (err) {\n            ERROR(`setDefaultMatchNum fail`);\n        }\n    }\n\n    // public debug functions\n    static printToken() {\n        LOG('my token is', this.apiToken);\n    }\n\n    // private functions\n    static async _fetchData(thingType, thingID) {\n        try {\n            const { data } = await axios.get(\n                `${this.dataUrl}/${thingType}/${thingID}`,\n                {},\n                this.header,\n            );\n            return data.response;\n        } catch (err) {\n            ERROR(`_fetchData fail ${thingType} ${thingID}`);\n        }\n    }\n\n    static async _searchData(thingType, constraints) {\n        try {\n            const { data } = await axios.get(\n                `${this.dataUrl}/${thingType}?constraints=${JSON.stringify(constraints)}`,\n                {},\n                this.header\n            );\n            return data.response;\n        } catch (err) {\n            ERROR(`_searchData fail ${thingType} ${constraints}`);\n        }\n    }\n\n    static async _fetchWorkflow(endpoint) {\n        try {\n            const { data } = await axios.get(\n                `${this.workflowUrl}/${endpoint}`,\n                this.header\n            );\n            return data.response;\n        } catch (err) {\n            ERROR(`_fetchWorkflow fail ${endpoint}`);\n        }\n    }\n\n    static async _fetchGame(gameID, blobDict) {\n        const rawGame = await this._fetchData('game', gameID);\n        let game = {\n            season: rawGame.season_text,\n            autoTeleSeconds: rawGame.autoteleseconds_number,\n            name: rawGame.name_text,\n            id: gameID,\n        };\n\n        const counterIDs = rawGame.counters_list_custom_counter;\n        game.counterDefs = await Promise.all(\n            counterIDs.map(id => this._fetchCounterDefinition(id, blobDict))\n        );\n        game.fetchedDate = new Date();\n\n        return game;\n    }\n\n    static async _fetchCounterDefinition(counterID, blobDict) {\n        const rawCounter = await this._fetchData('counterdefinition', counterID);\n        let counterDef = {\n            name: rawCounter.name_text,\n            scoutDisplayName: rawCounter.scoutdisplayname__boolean,\n            gamePhases: rawCounter.gamephases_list_option_gamephase,\n            sortOrder: rawCounter.sequence_number,\n            id: counterID,\n        };\n\n        const conditionIDs = rawCounter.conditions_list_custom_gamechoice;\n        counterDef.conditions = await Promise.all(\n            conditionIDs.map(id => this._fetchCounterCondition(id, blobDict))\n        );\n\n        return counterDef;\n    }\n\n    static async _fetchCounterCondition(counterConditionID, blobDict) {\n        const rawCondition = await this._fetchData('countercondition', counterConditionID);\n        let counterCondition = {\n            sortOrder: rawCondition.typesortorder_number,\n            name: rawCondition.display_text,\n            type: rawCondition.type_option_condition_type,\n            id: counterConditionID,\n        };\n\n        const optionIDs = rawCondition.choices_list_custom_counterconditionoption;\n\n        counterCondition.options = await Promise.all(\n            optionIDs.map(id => this._fetchCounterConditionOption(id, blobDict))\n        );\n\n        return counterCondition;\n    }\n\n    static async _fetchCounterConditionOption(optionID, blobDict) {\n        const rawOption = await this._fetchData('counterconditionoption', optionID);\n        let option = {\n            colorIDs: {\n                active: rawOption.coloractive_custom_colors,\n                flash: rawOption.colorflash_custom_colors,\n                inactive: rawOption.colorinactive_custom_colors,\n                selected: rawOption.colorselected_custom_colors,\n            },\n            name: rawOption.name_text,\n            height: rawOption.height_option_buttonheight,\n            imagePointer: rawOption.image_image,\n            sortOrder: rawOption.sortorder_number,\n            id: optionID,\n        };\n\n        if (option.imagePointer) {\n            const {blob, contentType} = await this._fetchImage(option.imagePointer);\n            option.imageBlob = blob;\n            option.saveImage = await BlobToSaveImage(blob, contentType);\n            blobDict[optionID] = blob;\n        }\n        return option;\n    }\n\n    static async _fetchImage(imagePointer) {\n        try {\n            const response = await fetch('https:' + imagePointer, {cache: 'no-cache'});\n            const contentType = response.headers.get('content-type');\n            const blob = await response.blob();\n            return {blob, contentType};\n        } catch (error) {\n            ERROR('Error fetching and storing image:', error);\n        };\n    }\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}