{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { useContext, useEffect } from 'react';\nimport Button from \"../components/Button\";\nimport BubbleApi from \"../api/BubbleApi\";\nimport Styles from \"../styles/Styles\";\nimport { LOCALKEYS } from \"../config\";\nimport { AuthContext } from \"../components/AuthProvider\";\nimport BlueAllianceApi from \"../api/BlueAllianceApi\";\nimport Header from \"../components/Header\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ScoutPage() {\n  var _eventInfo$, _eventInfo$$alliances, _eventInfo$$alliances2, _eventInfo$$alliances3, _eventInfo$2, _eventInfo$2$alliance, _eventInfo$2$alliance2, _eventInfo$2$alliance3;\n  var _useContext = useContext(AuthContext),\n    userInfo = _useContext.userInfo,\n    logout = _useContext.logout,\n    appVariables = _useContext.appVariables,\n    setAppVariables = _useContext.setAppVariables,\n    eventInfo = _useContext.eventMatches,\n    setEventMatches = _useContext.setEventMatches,\n    colorDict = _useContext.colorDict,\n    setColorDict = _useContext.setColorDict,\n    lastChanged = _useContext.lastChanged,\n    setLastChanged = _useContext.setLastChanged;\n  useEffect(function () {\n    var populateLastChanged = function () {\n      var _ref = _asyncToGenerator(function* () {\n        var apiLastChanged = yield BubbleApi.apiGetLastChanged();\n        setLastChanged(apiLastChanged);\n        console.log('last changed loaded from api', apiLastChanged);\n        console.log('current time is', new Date().getTime());\n      });\n      return function populateLastChanged() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    populateLastChanged();\n  }, []);\n  useEffect(function () {\n    var populateAppVariables = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        if (appVariables && userInfo && appVariables.teamNumT === userInfo.teamNumT) {\n          console.log('app Variables already in memory', appVariables);\n          return;\n        }\n        var storedAppVariables = yield AsyncStorage.getItem(LOCALKEYS.APPVAR);\n        if (storedAppVariables) {\n          var parsedAppVariables = JSON.parse(storedAppVariables);\n          parsedAppVariables.fetchedDate = new Date(parsedAppVariables.fetchedDate);\n          setAppVariables(parsedAppVariables);\n          console.log('app variables found in cache', parsedAppVariables);\n        } else {\n          var apiAppVariables = yield BubbleApi.apiGetAppVariables();\n          yield setAppVariables(apiAppVariables);\n          yield AsyncStorage.setItem(LOCALKEYS.APPVAR, JSON.stringify(apiAppVariables));\n          console.log('app variables loaded from api', apiAppVariables);\n        }\n      });\n      return function populateAppVariables() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    populateAppVariables();\n  }, []);\n  var loadEventMatchesApi = function () {\n    var _ref3 = _asyncToGenerator(function* (eventKey) {\n      var apiEventMatches = yield BlueAllianceApi.fetchMatches(eventKey);\n      setEventMatches(apiEventMatches);\n      yield AsyncStorage.setItem(LOCALKEYS.EVENTMATCHES, JSON.stringify(apiEventMatches));\n      console.log('event matches loaded from api', apiEventMatches);\n    });\n    return function loadEventMatchesApi(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    var populateEvent = function () {\n      var _ref4 = _asyncToGenerator(function* () {\n        if (!appVariables || !appVariables.eventKey) return;\n        if (eventInfo && eventInfo.eventKey === appVariables.eventKey && eventInfo[1] && eventInfo[1].alliances) {\n          console.log('eventMatches already in memory', eventInfo);\n          return;\n        }\n        var storedEventInfo = yield AsyncStorage.getItem(LOCALKEYS.EVENTMATCHES);\n        if (storedEventInfo) {\n          var parsedEventInfo = JSON.parse(storedEventInfo);\n          if (parsedEventInfo.eventKey === appVariables.eventKey && parsedEventInfo[1] && parsedEventInfo[1].alliances) {\n            setEventMatches(parsedEventInfo);\n            console.log('eventInfo in cache', parsedEventInfo);\n            return;\n          }\n        }\n        yield loadEventMatchesApi(appVariables.eventKey);\n      });\n      return function populateEvent() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    populateEvent();\n  }, [appVariables.eventKey]);\n  useEffect(function () {\n    var populateColorDict = function () {\n      var _ref5 = _asyncToGenerator(function* () {\n        if (!userInfo || !userInfo.teamNumT) return;\n        var storedColorDict = yield AsyncStorage.getItem(LOCALKEYS.COLORDICT);\n        if (storedColorDict) {\n          var parsedColorDict = JSON.parse(storedColorDict);\n          if (parsedColorDict.teamNumT === userInfo.teamNumT) {\n            setColorDict(parsedColorDict);\n            console.log('color dict found in cache', parsedColorDict);\n            return;\n          }\n        }\n        var apiColorDict = yield BubbleApi.apiGetColorDict(userInfo.teamNumT);\n        setColorDict(apiColorDict);\n        yield AsyncStorage.setItem(LOCALKEYS.COLORDICT, JSON.stringify(apiColorDict));\n        console.log('color dict loaded from api');\n      });\n      return function populateColorDict() {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n    populateColorDict();\n  }, [userInfo.teamNumT]);\n  return _jsxs(View, {\n    children: [_jsx(Header, {}), _jsx(View, {\n      id: \"textBlock\",\n      style: Styles.scoutContainer,\n      children: _jsxs(View, {\n        style: Styles.groupLeft,\n        children: [_jsxs(Text, {\n          style: [Styles.mediumTitle, styles.loginTitle],\n          children: [\"Welcome \", userInfo.name]\n        }), _jsxs(Text, {\n          style: [Styles.bodyText],\n          children: [\"Event: \", appVariables.eventKey]\n        }), _jsxs(Text, {\n          style: [Styles.bodyText],\n          children: [\"Match 1 blue: \", (_eventInfo$ = eventInfo[1]) == null ? void 0 : (_eventInfo$$alliances = _eventInfo$.alliances) == null ? void 0 : (_eventInfo$$alliances2 = _eventInfo$$alliances.blue) == null ? void 0 : (_eventInfo$$alliances3 = _eventInfo$$alliances2.team_keys) == null ? void 0 : _eventInfo$$alliances3.join(', ')]\n        }), _jsxs(Text, {\n          style: [Styles.bodyText],\n          children: [\"Match 1 red: \", (_eventInfo$2 = eventInfo[1]) == null ? void 0 : (_eventInfo$2$alliance = _eventInfo$2.alliances) == null ? void 0 : (_eventInfo$2$alliance2 = _eventInfo$2$alliance.red) == null ? void 0 : (_eventInfo$2$alliance3 = _eventInfo$2$alliance2.team_keys) == null ? void 0 : _eventInfo$2$alliance3.join(', ')]\n        })]\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  bottomNotes: {\n    marginTop: 60,\n    marginBottom: 100\n  },\n  loginTitle: {\n    marginTop: 30,\n    marginBottom: 12\n  },\n  image: {\n    width: 192,\n    height: 51.5,\n    alignSelf: 'center',\n    marginBottom: 30,\n    marginTop: 100\n  }\n});","map":{"version":3,"names":["AsyncStorage","React","useContext","useEffect","Button","BubbleApi","Styles","LOCALKEYS","AuthContext","BlueAllianceApi","Header","jsx","_jsx","jsxs","_jsxs","ScoutPage","_eventInfo$","_eventInfo$$alliances","_eventInfo$$alliances2","_eventInfo$$alliances3","_eventInfo$2","_eventInfo$2$alliance","_eventInfo$2$alliance2","_eventInfo$2$alliance3","_useContext","userInfo","logout","appVariables","setAppVariables","eventInfo","eventMatches","setEventMatches","colorDict","setColorDict","lastChanged","setLastChanged","populateLastChanged","_ref","_asyncToGenerator","apiLastChanged","apiGetLastChanged","console","log","Date","getTime","apply","arguments","populateAppVariables","_ref2","teamNumT","storedAppVariables","getItem","APPVAR","parsedAppVariables","JSON","parse","fetchedDate","apiAppVariables","apiGetAppVariables","setItem","stringify","loadEventMatchesApi","_ref3","eventKey","apiEventMatches","fetchMatches","EVENTMATCHES","_x","populateEvent","_ref4","alliances","storedEventInfo","parsedEventInfo","populateColorDict","_ref5","storedColorDict","COLORDICT","parsedColorDict","apiColorDict","apiGetColorDict","View","children","id","style","scoutContainer","groupLeft","Text","mediumTitle","styles","loginTitle","name","bodyText","blue","team_keys","join","red","StyleSheet","create","bottomNotes","marginTop","marginBottom","image","width","height","alignSelf"],"sources":["/Users/sgreene/src/cs1/pages/ScoutPage.js"],"sourcesContent":["import { StyleSheet, Text, View, Image } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport React, { useContext, useEffect } from 'react';\nimport Button from '../components/Button';\nimport BubbleApi from '../api/BubbleApi';\n\nimport Styles from '../styles/Styles';\nimport { LOCALKEYS } from '../config';\nimport { AuthContext } from '../components/AuthProvider';\nimport BlueAllianceApi from '../api/BlueAllianceApi';\nimport Header from '../components/Header';\n\nexport default function ScoutPage() {\n    const {\n        userInfo, logout,\n        appVariables, setAppVariables,\n        eventMatches: eventInfo, setEventMatches,\n        colorDict, setColorDict,\n        lastChanged, setLastChanged,\n    } = useContext(AuthContext);\n\n    // get lastChanged from api - TODO refresh other info if it's stale\n    useEffect(() => {\n        const populateLastChanged = async () => {\n            const apiLastChanged = await BubbleApi.apiGetLastChanged();\n            setLastChanged(apiLastChanged);\n\n            console.log('last changed loaded from api', apiLastChanged);\n            console.log('current time is', new Date().getTime());\n        };\n\n        populateLastChanged();\n    }, []); // Empty dependency array to run only on mount\n\n    // get appVariables from cache or api\n    useEffect(() => {\n        const populateAppVariables = async () => {\n            if (appVariables && userInfo && appVariables.teamNumT === userInfo.teamNumT) {\n                console.log('app Variables already in memory', appVariables);\n                return;\n            }\n            // Check if appVariables is in AsyncStorage\n            const storedAppVariables = await AsyncStorage.getItem(LOCALKEYS.APPVAR);\n\n            if (storedAppVariables) {\n                // If it exists, set it in the state\n                const parsedAppVariables = JSON.parse(storedAppVariables);\n                parsedAppVariables.fetchedDate = new Date(parsedAppVariables.fetchedDate);\n                setAppVariables(parsedAppVariables);\n                console.log('app variables found in cache', parsedAppVariables);\n            } else {\n                // If not, fetch it from the API\n                const apiAppVariables = await BubbleApi.apiGetAppVariables();\n                await setAppVariables(apiAppVariables);\n\n                // Store it in AsyncStorage for future use\n                await AsyncStorage.setItem(LOCALKEYS.APPVAR, JSON.stringify(apiAppVariables));\n                console.log('app variables loaded from api', apiAppVariables);\n            }\n        };\n\n        populateAppVariables();\n    }, []); // Empty dependency array to run only on mount\n\n    const loadEventMatchesApi = async eventKey => {\n        const apiEventMatches = await BlueAllianceApi.fetchMatches(eventKey);\n        setEventMatches(apiEventMatches);\n\n        // Store it in AsyncStorage for future use\n        await AsyncStorage.setItem(LOCALKEYS.EVENTMATCHES, JSON.stringify(apiEventMatches));\n        console.log('event matches loaded from api', apiEventMatches);\n    };\n\n    // get eventMatches from cache or API - depends on eventKey\n    useEffect(() => {\n        const populateEvent = async () => {\n            if (!appVariables || !appVariables.eventKey) return;\n\n            // 1 - already in React state\n            if (eventInfo\n                    && eventInfo.eventKey === appVariables.eventKey\n                    && eventInfo[1]\n                    && eventInfo[1].alliances) {\n                console.log('eventMatches already in memory', eventInfo);\n                return;\n            }\n\n            // 2 - already in cache\n            const storedEventInfo = await AsyncStorage.getItem(LOCALKEYS.EVENTMATCHES);\n            if (storedEventInfo) {\n                const parsedEventInfo = JSON.parse(storedEventInfo);\n                if (parsedEventInfo.eventKey === appVariables.eventKey\n                        && parsedEventInfo[1]\n                        && parsedEventInfo[1].alliances) {\n                    setEventMatches(parsedEventInfo);\n                    console.log('eventInfo in cache', parsedEventInfo);\n                    return;\n                }\n            }\n\n            // not found in cache\n            await loadEventMatchesApi(appVariables.eventKey);\n        };\n\n        populateEvent();\n    }, [appVariables.eventKey]); // Trigger only when event changes\n\n    // get colorDict from cache or API - depends on userInfo.teamNumT\n    useEffect(() => {\n        const populateColorDict = async () => {\n            if (!userInfo || !userInfo.teamNumT) return;\n\n            const storedColorDict = await AsyncStorage.getItem(LOCALKEYS.COLORDICT);\n            if (storedColorDict) {\n                // If it exists, set it in the state\n                const parsedColorDict = JSON.parse(storedColorDict);\n\n                if (parsedColorDict.teamNumT === userInfo.teamNumT) {\n                    setColorDict(parsedColorDict);\n                    console.log('color dict found in cache', parsedColorDict);\n                    return;\n                }\n            }\n\n            // If not, fetch it from the API\n            const apiColorDict = await BubbleApi.apiGetColorDict(userInfo.teamNumT);\n            setColorDict(apiColorDict);\n\n            // Store it in AsyncStorage for future use\n            await AsyncStorage.setItem(LOCALKEYS.COLORDICT, JSON.stringify(apiColorDict));\n            console.log('color dict loaded from api');\n\n        };\n\n        populateColorDict();\n    }, [userInfo.teamNumT]); // Trigger only when appVariables changes\n\n    return (\n        <View>\n            <Header />\n            <View id=\"textBlock\" style={Styles.scoutContainer}>\n                <View style={Styles.groupLeft}>\n                    <Text style={[Styles.mediumTitle, styles.loginTitle]}>Welcome {userInfo.name}</Text>\n                    <Text style={[Styles.bodyText]}>Event: {appVariables.eventKey}</Text>\n                    <Text style={[Styles.bodyText]}>\n                        Match 1 blue: {eventInfo[1]?.alliances?.blue?.team_keys?.join(', ')}\n                    </Text>\n                    <Text style={[Styles.bodyText]}\n                    >Match 1 red: {eventInfo[1]?.alliances?.red?.team_keys?.join(', ')}\n                    </Text>\n                </View>\n            </View>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    bottomNotes: {\n        marginTop: 60,\n        marginBottom: 100,\n    },\n    loginTitle: {\n        marginTop: 30,\n        marginBottom: 12,\n    },\n    image: {\n        width: 192,\n        height: 51.5,\n        alignSelf: 'center',\n        marginBottom: 30,\n        marginTop: 100,\n    },\n});"],"mappings":";;;;;AACA,OAAOA,YAAY,MAAM,2CAA2C;AAEpE,OAAOC,KAAK,IAAIC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACpD,OAAOC,MAAM;AACb,OAAOC,SAAS;AAEhB,OAAOC,MAAM;AACb,SAASC,SAAS;AAClB,SAASC,WAAW;AACpB,OAAOC,eAAe;AACtB,OAAOC,MAAM;AAA6B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE1C,eAAe,SAASC,SAASA,CAAA,EAAG;EAAA,IAAAC,WAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,YAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;EAChC,IAAAC,WAAA,GAMItB,UAAU,CAACM,WAAW,CAAC;IALvBiB,QAAQ,GAAAD,WAAA,CAARC,QAAQ;IAAEC,MAAM,GAAAF,WAAA,CAANE,MAAM;IAChBC,YAAY,GAAAH,WAAA,CAAZG,YAAY;IAAEC,eAAe,GAAAJ,WAAA,CAAfI,eAAe;IACfC,SAAS,GAAAL,WAAA,CAAvBM,YAAY;IAAaC,eAAe,GAAAP,WAAA,CAAfO,eAAe;IACxCC,SAAS,GAAAR,WAAA,CAATQ,SAAS;IAAEC,YAAY,GAAAT,WAAA,CAAZS,YAAY;IACvBC,WAAW,GAAAV,WAAA,CAAXU,WAAW;IAAEC,cAAc,GAAAX,WAAA,CAAdW,cAAc;EAI/BhC,SAAS,CAAC,YAAM;IACZ,IAAMiC,mBAAmB;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;QACpC,IAAMC,cAAc,SAASlC,SAAS,CAACmC,iBAAiB,CAAC,CAAC;QAC1DL,cAAc,CAACI,cAAc,CAAC;QAE9BE,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEH,cAAc,CAAC;QAC3DE,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC;MACxD,CAAC;MAAA,gBANKR,mBAAmBA,CAAA;QAAA,OAAAC,IAAA,CAAAQ,KAAA,OAAAC,SAAA;MAAA;IAAA,GAMxB;IAEDV,mBAAmB,CAAC,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAGNjC,SAAS,CAAC,YAAM;IACZ,IAAM4C,oBAAoB;MAAA,IAAAC,KAAA,GAAAV,iBAAA,CAAG,aAAY;QACrC,IAAIX,YAAY,IAAIF,QAAQ,IAAIE,YAAY,CAACsB,QAAQ,KAAKxB,QAAQ,CAACwB,QAAQ,EAAE;UACzER,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEf,YAAY,CAAC;UAC5D;QACJ;QAEA,IAAMuB,kBAAkB,SAASlD,YAAY,CAACmD,OAAO,CAAC5C,SAAS,CAAC6C,MAAM,CAAC;QAEvE,IAAIF,kBAAkB,EAAE;UAEpB,IAAMG,kBAAkB,GAAGC,IAAI,CAACC,KAAK,CAACL,kBAAkB,CAAC;UACzDG,kBAAkB,CAACG,WAAW,GAAG,IAAIb,IAAI,CAACU,kBAAkB,CAACG,WAAW,CAAC;UACzE5B,eAAe,CAACyB,kBAAkB,CAAC;UACnCZ,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEW,kBAAkB,CAAC;QACnE,CAAC,MAAM;UAEH,IAAMI,eAAe,SAASpD,SAAS,CAACqD,kBAAkB,CAAC,CAAC;UAC5D,MAAM9B,eAAe,CAAC6B,eAAe,CAAC;UAGtC,MAAMzD,YAAY,CAAC2D,OAAO,CAACpD,SAAS,CAAC6C,MAAM,EAAEE,IAAI,CAACM,SAAS,CAACH,eAAe,CAAC,CAAC;UAC7EhB,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEe,eAAe,CAAC;QACjE;MACJ,CAAC;MAAA,gBAvBKV,oBAAoBA,CAAA;QAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;MAAA;IAAA,GAuBzB;IAEDC,oBAAoB,CAAC,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMc,mBAAmB;IAAA,IAAAC,KAAA,GAAAxB,iBAAA,CAAG,WAAMyB,QAAQ,EAAI;MAC1C,IAAMC,eAAe,SAASvD,eAAe,CAACwD,YAAY,CAACF,QAAQ,CAAC;MACpEhC,eAAe,CAACiC,eAAe,CAAC;MAGhC,MAAMhE,YAAY,CAAC2D,OAAO,CAACpD,SAAS,CAAC2D,YAAY,EAAEZ,IAAI,CAACM,SAAS,CAACI,eAAe,CAAC,CAAC;MACnFvB,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEsB,eAAe,CAAC;IACjE,CAAC;IAAA,gBAPKH,mBAAmBA,CAAAM,EAAA;MAAA,OAAAL,KAAA,CAAAjB,KAAA,OAAAC,SAAA;IAAA;EAAA,GAOxB;EAGD3C,SAAS,CAAC,YAAM;IACZ,IAAMiE,aAAa;MAAA,IAAAC,KAAA,GAAA/B,iBAAA,CAAG,aAAY;QAC9B,IAAI,CAACX,YAAY,IAAI,CAACA,YAAY,CAACoC,QAAQ,EAAE;QAG7C,IAAIlC,SAAS,IACFA,SAAS,CAACkC,QAAQ,KAAKpC,YAAY,CAACoC,QAAQ,IAC5ClC,SAAS,CAAC,CAAC,CAAC,IACZA,SAAS,CAAC,CAAC,CAAC,CAACyC,SAAS,EAAE;UAC/B7B,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEb,SAAS,CAAC;UACxD;QACJ;QAGA,IAAM0C,eAAe,SAASvE,YAAY,CAACmD,OAAO,CAAC5C,SAAS,CAAC2D,YAAY,CAAC;QAC1E,IAAIK,eAAe,EAAE;UACjB,IAAMC,eAAe,GAAGlB,IAAI,CAACC,KAAK,CAACgB,eAAe,CAAC;UACnD,IAAIC,eAAe,CAACT,QAAQ,KAAKpC,YAAY,CAACoC,QAAQ,IAC3CS,eAAe,CAAC,CAAC,CAAC,IAClBA,eAAe,CAAC,CAAC,CAAC,CAACF,SAAS,EAAE;YACrCvC,eAAe,CAACyC,eAAe,CAAC;YAChC/B,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE8B,eAAe,CAAC;YAClD;UACJ;QACJ;QAGA,MAAMX,mBAAmB,CAAClC,YAAY,CAACoC,QAAQ,CAAC;MACpD,CAAC;MAAA,gBA3BKK,aAAaA,CAAA;QAAA,OAAAC,KAAA,CAAAxB,KAAA,OAAAC,SAAA;MAAA;IAAA,GA2BlB;IAEDsB,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,CAACzC,YAAY,CAACoC,QAAQ,CAAC,CAAC;EAG3B5D,SAAS,CAAC,YAAM;IACZ,IAAMsE,iBAAiB;MAAA,IAAAC,KAAA,GAAApC,iBAAA,CAAG,aAAY;QAClC,IAAI,CAACb,QAAQ,IAAI,CAACA,QAAQ,CAACwB,QAAQ,EAAE;QAErC,IAAM0B,eAAe,SAAS3E,YAAY,CAACmD,OAAO,CAAC5C,SAAS,CAACqE,SAAS,CAAC;QACvE,IAAID,eAAe,EAAE;UAEjB,IAAME,eAAe,GAAGvB,IAAI,CAACC,KAAK,CAACoB,eAAe,CAAC;UAEnD,IAAIE,eAAe,CAAC5B,QAAQ,KAAKxB,QAAQ,CAACwB,QAAQ,EAAE;YAChDhB,YAAY,CAAC4C,eAAe,CAAC;YAC7BpC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEmC,eAAe,CAAC;YACzD;UACJ;QACJ;QAGA,IAAMC,YAAY,SAASzE,SAAS,CAAC0E,eAAe,CAACtD,QAAQ,CAACwB,QAAQ,CAAC;QACvEhB,YAAY,CAAC6C,YAAY,CAAC;QAG1B,MAAM9E,YAAY,CAAC2D,OAAO,CAACpD,SAAS,CAACqE,SAAS,EAAEtB,IAAI,CAACM,SAAS,CAACkB,YAAY,CAAC,CAAC;QAC7ErC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MAE7C,CAAC;MAAA,gBAvBK+B,iBAAiBA,CAAA;QAAA,OAAAC,KAAA,CAAA7B,KAAA,OAAAC,SAAA;MAAA;IAAA,GAuBtB;IAED2B,iBAAiB,CAAC,CAAC;EACvB,CAAC,EAAE,CAAChD,QAAQ,CAACwB,QAAQ,CAAC,CAAC;EAEvB,OACInC,KAAA,CAACkE,IAAI;IAAAC,QAAA,GACDrE,IAAA,CAACF,MAAM,IAAE,CAAC,EACVE,IAAA,CAACoE,IAAI;MAACE,EAAE,EAAC,WAAW;MAACC,KAAK,EAAE7E,MAAM,CAAC8E,cAAe;MAAAH,QAAA,EAC9CnE,KAAA,CAACkE,IAAI;QAACG,KAAK,EAAE7E,MAAM,CAAC+E,SAAU;QAAAJ,QAAA,GAC1BnE,KAAA,CAACwE,IAAI;UAACH,KAAK,EAAE,CAAC7E,MAAM,CAACiF,WAAW,EAAEC,MAAM,CAACC,UAAU,CAAE;UAAAR,QAAA,GAAC,UAAQ,EAACxD,QAAQ,CAACiE,IAAI;QAAA,CAAO,CAAC,EACpF5E,KAAA,CAACwE,IAAI;UAACH,KAAK,EAAE,CAAC7E,MAAM,CAACqF,QAAQ,CAAE;UAAAV,QAAA,GAAC,SAAO,EAACtD,YAAY,CAACoC,QAAQ;QAAA,CAAO,CAAC,EACrEjD,KAAA,CAACwE,IAAI;UAACH,KAAK,EAAE,CAAC7E,MAAM,CAACqF,QAAQ,CAAE;UAAAV,QAAA,GAAC,gBACd,GAAAjE,WAAA,GAACa,SAAS,CAAC,CAAC,CAAC,sBAAAZ,qBAAA,GAAZD,WAAA,CAAcsD,SAAS,sBAAApD,sBAAA,GAAvBD,qBAAA,CAAyB2E,IAAI,sBAAAzE,sBAAA,GAA7BD,sBAAA,CAA+B2E,SAAS,qBAAxC1E,sBAAA,CAA0C2E,IAAI,CAAC,IAAI,CAAC;QAAA,CACjE,CAAC,EACPhF,KAAA,CAACwE,IAAI;UAACH,KAAK,EAAE,CAAC7E,MAAM,CAACqF,QAAQ,CAAE;UAAAV,QAAA,GAC9B,eAAa,GAAA7D,YAAA,GAACS,SAAS,CAAC,CAAC,CAAC,sBAAAR,qBAAA,GAAZD,YAAA,CAAckD,SAAS,sBAAAhD,sBAAA,GAAvBD,qBAAA,CAAyB0E,GAAG,sBAAAxE,sBAAA,GAA5BD,sBAAA,CAA8BuE,SAAS,qBAAvCtE,sBAAA,CAAyCuE,IAAI,CAAC,IAAI,CAAC;QAAA,CAC5D,CAAC;MAAA,CACL;IAAC,CACL,CAAC;EAAA,CACL,CAAC;AAEf;AAEA,IAAMN,MAAM,GAAGQ,UAAU,CAACC,MAAM,CAAC;EAC7BC,WAAW,EAAE;IACTC,SAAS,EAAE,EAAE;IACbC,YAAY,EAAE;EAClB,CAAC;EACDX,UAAU,EAAE;IACRU,SAAS,EAAE,EAAE;IACbC,YAAY,EAAE;EAClB,CAAC;EACDC,KAAK,EAAE;IACHC,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,IAAI;IACZC,SAAS,EAAE,QAAQ;IACnBJ,YAAY,EAAE,EAAE;IAChBD,SAAS,EAAE;EACf;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}