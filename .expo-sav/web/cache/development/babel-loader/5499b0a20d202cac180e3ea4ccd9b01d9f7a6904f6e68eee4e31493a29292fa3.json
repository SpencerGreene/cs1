{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nexport var BlobToSaveImage = function BlobToSaveImage(blob, contentType) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.onerror = reject;\n    reader.onload = function () {\n      var imageData = reader.result.split(',')[1];\n      resolve({\n        imageData: imageData,\n        contentType: contentType\n      });\n    };\n    reader.readAsDataURL(blob);\n  });\n};\nexport var savedImageToBlob = function () {\n  var _ref = _asyncToGenerator(function* (saveImage) {\n    LOG('os is', Platform.OS);\n    try {\n      var response = yield fetch(`data:image/jpeg;base64,${saveImage.imageData}`);\n      var blob = yield response.blob();\n      return blob;\n    } catch (error) {\n      console.error('Error converting base64 to blob:', error);\n      throw error;\n    }\n  });\n  return function savedImageToBlob(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var saveData = function () {\n  var _ref2 = _asyncToGenerator(function* (key, data) {\n    try {\n      if (Platform.OS === 'web') {\n        if (data instanceof Blob) {\n          var blobUrl = URL.createObjectURL(data);\n          localStorage.setItem(key, blobUrl);\n        } else {\n          localStorage.setItem(key, JSON.stringify(data));\n        }\n      } else {\n        if (data instanceof Blob) {\n          var base64String = yield BlobToBase64(data);\n          yield AsyncStorage.setItem(key, base64String);\n        } else {\n          yield AsyncStorage.setItem(key, JSON.stringify(data));\n        }\n      }\n    } catch (error) {\n      console.error('Error saving data:', error);\n    }\n  });\n  return function saveData(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getData = function () {\n  var _ref3 = _asyncToGenerator(function* (key) {\n    try {\n      if (Platform.OS === 'web') {\n        var storedData = localStorage.getItem(key);\n        if (storedData && storedData.startsWith('blob:')) {\n          return storedData;\n        } else {\n          return storedData ? JSON.parse(storedData) : null;\n        }\n      } else {\n        var _storedData = yield AsyncStorage.getItem(key);\n        return _storedData ? JSON.parse(_storedData) : null;\n      }\n    } catch (error) {\n      console.error('Error retrieving data:', error);\n      return null;\n    }\n  });\n  return function getData(_x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var deleteData = function () {\n  var _ref4 = _asyncToGenerator(function* (key) {\n    try {\n      if (Platform.OS === 'web') {\n        var storedData = localStorage.getItem(key);\n        if (storedData && storedData.startsWith('blob:')) {\n          URL.revokeObjectURL(storedData);\n        }\n        localStorage.removeItem(key);\n      } else {\n        yield AsyncStorage.removeItem(key);\n      }\n    } catch (error) {\n      console.error('Error deleting data:', error);\n    }\n  });\n  return function deleteData(_x5) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["AsyncStorage","BlobToSaveImage","blob","contentType","Promise","resolve","reject","reader","FileReader","onerror","onload","imageData","result","split","readAsDataURL","savedImageToBlob","_ref","_asyncToGenerator","saveImage","LOG","Platform","OS","response","fetch","error","console","_x","apply","arguments","saveData","_ref2","key","data","Blob","blobUrl","URL","createObjectURL","localStorage","setItem","JSON","stringify","base64String","BlobToBase64","_x2","_x3","getData","_ref3","storedData","getItem","startsWith","parse","_x4","deleteData","_ref4","revokeObjectURL","removeItem","_x5"],"sources":["/Users/sgreene/src/cs1/helpers/imageHelpers.js"],"sourcesContent":["import { Platform } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Helper function to convert blob to base64 in React Native\nexport const BlobToSaveImage = (blob, contentType) => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onerror = reject;\n        reader.onload = () => {\n            const imageData = reader.result.split(',')[1];\n            resolve({ imageData, contentType });\n        };\n        reader.readAsDataURL(blob);\n    });\n};\n\nexport const savedImageToBlob = async (saveImage) => {\n    LOG('os is', Platform.OS);\n    try {\n        const response = await fetch(`data:image/jpeg;base64,${saveImage.imageData}`);\n        const blob = await response.blob();\n        return blob;\n    } catch (error) {\n        console.error('Error converting base64 to blob:', error);\n        throw error;\n    }\n};\n\n// Function to save data to storage\nexport const saveData = async (key, data) => {\n    try {\n        if (Platform.OS === 'web') {\n            // Handle image blob for web\n            if (data instanceof Blob) {\n                const blobUrl = URL.createObjectURL(data);\n                localStorage.setItem(key, blobUrl);\n            } else {\n                localStorage.setItem(key, JSON.stringify(data));\n            }\n        } else {\n            // Handle image blob for React Native\n            if (data instanceof Blob) {\n                // Convert blob to base64 string\n                const base64String = await BlobToBase64(data);\n                await AsyncStorage.setItem(key, base64String);\n            } else {\n                await AsyncStorage.setItem(key, JSON.stringify(data));\n            }\n        }\n    } catch (error) {\n        console.error('Error saving data:', error);\n    }\n};\n\n// Function to retrieve data from storage\nexport const getData = async (key) => {\n    try {\n        if (Platform.OS === 'web') {\n            const storedData = localStorage.getItem(key);\n            // Check if it's a blob URL\n            if (storedData && storedData.startsWith('blob:')) {\n                return storedData;\n            } else {\n                return storedData ? JSON.parse(storedData) : null;\n            }\n        } else {\n            const storedData = await AsyncStorage.getItem(key);\n            return storedData ? JSON.parse(storedData) : null;\n        }\n    } catch (error) {\n        console.error('Error retrieving data:', error);\n        return null;\n    }\n};\n\n\n\n// Function to delete data from storage\nexport const deleteData = async (key) => {\n    try {\n        if (Platform.OS === 'web') {\n            // Handle cleanup for web (remove blob URL)\n            const storedData = localStorage.getItem(key);\n            if (storedData && storedData.startsWith('blob:')) {\n                URL.revokeObjectURL(storedData);\n            }\n            localStorage.removeItem(key);\n        } else {\n            // Handle cleanup for React Native\n            await AsyncStorage.removeItem(key);\n        }\n    } catch (error) {\n        console.error('Error deleting data:', error);\n    }\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}